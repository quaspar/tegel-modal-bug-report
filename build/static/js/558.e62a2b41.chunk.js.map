{"version":3,"file":"static/js/558.e62a2b41.chunk.js","mappings":"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","sources":["../node_modules/@scania/tegel/dist/esm/tds-folder-tabs.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-529974bd.js';\n\nconst folderTabsCss = \":host{box-sizing:border-box;overflow:hidden;outline:0}:host *{box-sizing:border-box}:host .wrapper{display:flex;overflow-x:scroll;scrollbar-width:none;position:relative}:host .wrapper::-webkit-scrollbar{display:none}:host .scroll-right-button{z-index:1;right:0}:host .scroll-left-button{z-index:1;left:0}:host .scroll-right-button,:host .scroll-left-button{height:50px;color:var(--tds-folder-tabs-scroll-btn-color);cursor:pointer;border:0;width:0;background-color:var(--tds-folder-tabs-scroll-btn-background);display:none;justify-content:center;align-items:center;opacity:0;pointer-events:none;position:sticky}:host .scroll-right-button.show,:host .scroll-left-button.show{min-width:48px;display:block;opacity:1;pointer-events:all}:host .scroll-right-button:hover,:host .scroll-left-button:hover{background-color:var(--tds-folder-tabs-scroll-btn-background-hover)}:host .scroll-right-button:active,:host .scroll-left-button:active{background-color:var(--tds-folder-tabs-scroll-btn-background-active)}:host .scroll-right-button:focus,:host .scroll-left-button:focus{outline:2px solid var(--tds-blue-400);outline-offset:-2px}:host .scroll-right-button svg,:host .scroll-left-button svg{fill:var(--tds-folder-tabs-scroll-btn-color)}\";\nconst TdsFolderTabsStyle0 = folderTabsCss;\n\nconst TdsFolderTabs = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsChange = createEvent(this, \"tdsChange\", 7);\n        this.navWrapperElement = null; // reference to container with nav buttons\n        this.componentWidth = 0; // visible width of this component\n        this.buttonsWidth = 0; // total width of all nav items combined\n        this.scrollWidth = 0; // total amount that is possible to scroll in the nav wrapper\n        this.addResizeObserver = () => {\n            const resizeObserver = new ResizeObserver((entries) => {\n                entries.forEach((entry) => {\n                    const componentWidth = entry.contentRect.width;\n                    let buttonsWidth = 0;\n                    const navButtons = Array.from(this.host.children);\n                    navButtons.forEach((navButton) => {\n                        const style = window.getComputedStyle(navButton);\n                        buttonsWidth +=\n                            navButton.clientWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n                    });\n                    this.componentWidth = componentWidth;\n                    this.buttonsWidth = buttonsWidth;\n                    this.scrollWidth = buttonsWidth - componentWidth;\n                    if (this.buttonsWidth > this.componentWidth) {\n                        this.evaluateScrollButtons();\n                    }\n                    else {\n                        this.showLeftScroll = false;\n                        this.showRightScroll = false;\n                    }\n                });\n            });\n            resizeObserver.observe(this.navWrapperElement);\n        };\n        this.addEventListenerToTabs = () => {\n            this.children = Array.from(this.host.children);\n            this.children = this.children.map((item, index) => {\n                item.addEventListener('click', () => {\n                    if (!item.disabled) {\n                        const tdsChangeEvent = this.tdsChange.emit({\n                            selectedTabIndex: this.children.indexOf(item),\n                        });\n                        if (!tdsChangeEvent.defaultPrevented) {\n                            this.children.forEach((element) => element.setSelected(false));\n                            item.setSelected(true);\n                            this.selectedIndex = index;\n                        }\n                    }\n                });\n                return item;\n            });\n        };\n        this.modeVariant = null;\n        this.defaultSelectedIndex = 0;\n        this.selectedIndex = undefined;\n        this.buttonWidth = 0;\n        this.showLeftScroll = false;\n        this.showRightScroll = false;\n    }\n    /** Sets the passed tabindex as the selected Tab. */\n    async selectTab(tabIndex) {\n        if (!this.children[tabIndex].disabled) {\n            this.children.forEach((element) => element.setSelected(false));\n            this.children = this.children.map((element, index) => {\n                if (index === tabIndex) {\n                    element.setSelected(true);\n                    this.selectedIndex = tabIndex;\n                }\n                return element;\n            });\n        }\n        return {\n            selectedTabIndex: this.selectedIndex,\n        };\n    }\n    handleSelectedIndexUpdate() {\n        this.children = Array.from(this.host.children).map((tabElement) => {\n            tabElement.setSelected(false);\n            return tabElement;\n        });\n        this.children[this.selectedIndex].setSelected(true);\n    }\n    calculateButtonWidth() {\n        this.children = this.children.map((tab) => {\n            if (tab.offsetWidth > this.buttonWidth) {\n                this.buttonWidth = tab.offsetWidth;\n            }\n            return tab;\n        });\n        this.children.forEach((tab) => {\n            tab.setTabWidth(this.buttonWidth);\n        });\n    }\n    scrollRight() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        this.navWrapperElement.scrollLeft = scroll + this.buttonWidth;\n        this.evaluateScrollButtons();\n    }\n    scrollLeft() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        this.navWrapperElement.scrollLeft = scroll - this.buttonWidth;\n        this.evaluateScrollButtons();\n    }\n    evaluateScrollButtons() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        if (scroll >= this.scrollWidth) {\n            this.showRightScroll = false;\n        }\n        else {\n            this.showRightScroll = true;\n        }\n        if (scroll <= 0) {\n            this.showLeftScroll = false;\n        }\n        else {\n            this.showLeftScroll = true;\n        }\n    }\n    connectedCallback() {\n        this.children = Array.from(this.host.children);\n        this.children[0].classList.add('first');\n        this.children[this.children.length - 1].classList.add('last');\n    }\n    componentDidLoad() {\n        if (this.selectedIndex === undefined) {\n            this.addEventListenerToTabs();\n            this.children[this.defaultSelectedIndex].setSelected(true);\n            this.selectedIndex = this.defaultSelectedIndex;\n            this.tdsChange.emit({\n                selectedTabIndex: this.selectedIndex,\n            });\n        }\n        else {\n            this.children[this.selectedIndex].setSelected(true);\n            this.tdsChange.emit({\n                selectedTabIndex: this.selectedIndex,\n            });\n        }\n        this.calculateButtonWidth();\n    }\n    componentDidUpdate() {\n        this.calculateButtonWidth();\n    }\n    componentDidRender() {\n        if (this.buttonsWidth > this.componentWidth) {\n            this.evaluateScrollButtons();\n        }\n        else {\n            this.showLeftScroll = false;\n            this.showRightScroll = false;\n        }\n        this.addResizeObserver();\n    }\n    render() {\n        return (h(Host, { key: 'eb1635179f54af77e7438282c76e3eaa11d53bd8', role: \"list\", class: `${this.modeVariant ? `tds-mode-variant-${this.modeVariant}` : ''}` }, h(\"div\", { key: '615a36341f659d538ee48742cb565357d4bc4f89', class: \"wrapper\", ref: (el) => {\n                this.navWrapperElement = el;\n            } }, h(\"button\", { key: 'e2c7ac86a3fd268d9f81c9429df110e01007297a', class: `scroll-left-button ${this.showLeftScroll ? 'show' : ''}`, disabled: !this.showLeftScroll, onClick: () => this.scrollLeft() }, h(\"tds-icon\", { key: 'c3f4cfdadfdc0e727405741a0255573bfac48e77', name: \"chevron_left\", size: \"20px\" })), h(\"slot\", { key: 'c8a92e5d6ceabf50f4a8275282c4f49b8b21e232' }), h(\"button\", { key: 'af855609041ab58deb465d35e2f03fe5c49e68ed', class: `scroll-right-button ${this.showRightScroll ? 'show' : ''}`, disabled: !this.showRightScroll, onClick: () => this.scrollRight() }, h(\"tds-icon\", { key: 'd212ddb172369557a9cb06cf26533c4eba8e7108', name: \"chevron_right\", size: \"20px\" })))));\n    }\n    get host() { return getElement(this); }\n    static get watchers() { return {\n        \"selectedIndex\": [\"handleSelectedIndexUpdate\"]\n    }; }\n};\nTdsFolderTabs.style = TdsFolderTabsStyle0;\n\nexport { TdsFolderTabs as tds_folder_tabs };\n"],"names":["TdsFolderTabs","constructor","hostRef","registerInstance","this","tdsChange","createEvent","navWrapperElement","componentWidth","buttonsWidth","scrollWidth","addResizeObserver","ResizeObserver","entries","forEach","entry","contentRect","width","Array","from","host","children","navButton","style","window","getComputedStyle","clientWidth","parseFloat","marginLeft","marginRight","evaluateScrollButtons","showLeftScroll","showRightScroll","observe","addEventListenerToTabs","map","item","index","addEventListener","disabled","emit","selectedTabIndex","indexOf","defaultPrevented","element","setSelected","selectedIndex","modeVariant","defaultSelectedIndex","undefined","buttonWidth","selectTab","tabIndex","handleSelectedIndexUpdate","tabElement","calculateButtonWidth","tab","offsetWidth","setTabWidth","scrollRight","scroll","scrollLeft","connectedCallback","classList","add","length","componentDidLoad","componentDidUpdate","componentDidRender","render","h","Host","key","role","class","concat","ref","el","onClick","name","size","getElement","watchers"],"sourceRoot":""}