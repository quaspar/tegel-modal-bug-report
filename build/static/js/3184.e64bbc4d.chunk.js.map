{"version":3,"file":"static/js/3184.e64bbc4d.chunk.js","mappings":"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","sources":["../node_modules/@scania/tegel/dist/esm/generateUniqueId-7934d315.js","../node_modules/@scania/tegel/dist/esm/tds-slider.entry.js"],"sourcesContent":["/**\n * Generates a reasonably unique string ID based on current time (minutes, seconds, milliseconds) and random numbers.\n *\n * This function combines the current time and random numbers to generate\n * a unique string ID. The function assumes that it won't be called frequently\n * enough to generate two identical IDs within a millisecond, or that the random\n * number generator will produce the same value twice in quick succession.\n *\n * Note: The IDs generated by this function are not globally unique and their length may vary.\n * For truly unique and fixed-length IDs, consider using a more robust method such as UUID.\n *\n * @returns {string} A unique string ID.\n */\nfunction generateUniqueId() {\n    const now = new Date();\n    const timeInMilliseconds = now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds(); // Get current time in milliseconds from the start of the hour\n    const randomNum1 = Math.floor(Math.random() * 1000000); // Random number between 0 and 999999\n    const randomNum2 = Math.floor(Math.random() * 1000000); // Another random number\n    // Convert to base 36 (using numbers and letters) and remove '0.' from the random number\n    const uniqueString = randomNum1.toString(36).substring(2) +\n        timeInMilliseconds.toString(36) +\n        randomNum2.toString(36).substring(2);\n    return uniqueString;\n}\n\nexport { generateUniqueId as g };\n","import { r as registerInstance, c as createEvent, h } from './index-529974bd.js';\nimport { g as generateUniqueId } from './generateUniqueId-7934d315.js';\n\nconst sliderCss = \"tds-slider{box-sizing:border-box;width:100%}tds-slider *{box-sizing:border-box}tds-slider input[type=range].tds-slider-native-element{display:none}.tds-slider-wrapper{width:100%}.tds-slider-wrapper.read-only{pointer-events:none}.tds-slider{width:100%;display:flex;flex-wrap:nowrap;padding-top:65px}.tds-slider .tds-slider-inner{width:100%;height:20px;position:relative}.tds-slider .tds-slider__controls{position:relative;top:-25px}.tds-slider .tds-slider__controls .tds-slider__control{cursor:pointer}.tds-slider .tds-slider__controls .tds-slider__control.tds-slider__control-minus{padding:18px 18px 18px 0}.tds-slider .tds-slider__controls .tds-slider__control.tds-slider__control-plus{padding:18px 0 18px 18px}.tds-slider .tds-slider__input-values{position:relative;top:-25px;display:flex;flex-wrap:nowrap;align-items:center}.tds-slider .tds-slider__input-values .tds-slider__input-value{user-select:none;padding:18px;color:var(--tds-grey-700);font:var(--tds-detail-02);letter-spacing:var(--tds-detail-02-ls)}.tds-slider .tds-slider__input-values .tds-slider__input-value.min-value{padding-left:0}.tds-slider .tds-slider__input-values .tds-slider__input-field-wrapper{background-color:var(--tds-slider-inputfield-background);display:flex;align-items:center;justify-content:center;border-radius:4px 4px 0 0}.tds-slider .tds-slider__input-values .tds-slider__input-field-wrapper input.tds-slider__input-field{font:var(--tds-detail-02);letter-spacing:var(--tds-detail-02-ls);color:var(--tds-slider-input-inputfield-color);border:0;background-color:transparent;text-align:center;padding:12px;box-shadow:inset 0 -1px 0 var(--tds-slider-inputfield-box-shadow);border-radius:4px 4px 0 0}.tds-slider .tds-slider__input-values .tds-slider__input-field-wrapper input.tds-slider__input-field:hover{box-shadow:inset 0 -1px 0 var(--tds-grey-600)}.tds-slider .tds-slider__input-values .tds-slider__input-field-wrapper input.tds-slider__input-field:focus{box-shadow:inset 0 -2px 0 var(--tds-blue-400);outline:0}.tds-slider label{font:var(--tds-detail-05);letter-spacing:var(--tds-detail-05-ls);user-select:none;position:absolute;color:var(--tds-slider-label-color);padding-bottom:16px;transform:translateY(-100%)}.tds-slider label.offset{padding-bottom:34px}.tds-slider .tds-slider__value{font:var(--tds-detail-01);letter-spacing:var(--tds-detail-01-ls);user-select:none;border-radius:4px;padding:8px;position:absolute;transform:translate(-50%, -100%);top:-24px;background-color:var(--tds-slider-value-tooltip-background);color:var(--tds-slider-value-tooltip-color)}.tds-slider .tds-slider__value svg{color:var(--tds-slider-value-tooltip-background);position:absolute;left:50%;transform:translateX(-50%);top:34px}.tds-slider .tds-slider__thumb{position:absolute}.tds-slider .tds-slider__thumb .tds-slider__thumb-inner{width:20px;height:20px;border-radius:100%;background-color:var(--tds-slider-thumb-color);position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);cursor:pointer}.tds-slider .tds-slider__thumb .tds-slider__thumb-inner::before{content:\\\" \\\";display:none;width:48px;height:48px;background-color:var(--tds-slider-thumb-color);position:absolute;border-radius:100%;top:50%;left:50%;transform:translate(-50%, -50%)}.tds-slider .tds-slider__thumb .tds-slider__thumb-inner:hover::before{display:block;opacity:0.08}.tds-slider .tds-slider__thumb .tds-slider__thumb-inner.pressed{width:24px;height:24px}.tds-slider .tds-slider__thumb .tds-slider__thumb-inner.pressed::before{display:block;opacity:0.16 !important}.tds-slider .tds-slider__value-dividers-wrapper{position:relative;width:100%;pointer-events:none}.tds-slider .tds-slider__value-dividers{pointer-events:none;position:absolute;display:flex;justify-content:space-between;width:100%}.tds-slider .tds-slider__value-dividers .tds-slider__value-divider{transform:translateY(-50%);height:16px;background-color:var(--tds-slider-divider-color);color:var(--tds-slider-divider-values-color);width:1px}.tds-slider .tds-slider__value-dividers .tds-slider__value-divider span{display:block;user-select:none;color:var(-tds-grey-700);font:var(--tds-detail-05);letter-spacing:var(--tds-detail-05-ls);position:relative;top:-7px;left:50%;transform:translate(-50%, -100%);width:50px;text-align:center}.tds-slider .tds-slider__track{width:100%;height:2px;border-radius:1px;background-color:var(--tds-slider-track-color);position:relative}.tds-slider .tds-slider__track:focus{outline:0}.tds-slider .tds-slider__track:focus .tds-slider__thumb .tds-slider__thumb-inner{width:24px;height:24px}.tds-slider .tds-slider__track:focus .tds-slider__thumb .tds-slider__thumb-inner::before{display:block;opacity:0.08}.tds-slider .tds-slider__track .tds-slider__track-fill{background-color:var(--tds-slider-track-fill-color);border-radius:2px;height:4px;position:absolute;left:0;top:-1px}.tds-slider.disabled{cursor:not-allowed}.tds-slider.disabled>*{pointer-events:none}.tds-slider.disabled label{color:var(--tds-slider-disabled)}.tds-slider.disabled .tds-slider__controls .tds-slider__control{cursor:default}.tds-slider.disabled .tds-slider__controls .tds-slider__control.tds-slider__control-minus svg,.tds-slider.disabled .tds-slider__controls .tds-slider__control.tds-slider__control-plus svg{fill:var(--tds-slider-disabled)}.tds-slider.disabled .tds-slider__input-values .tds-slider__input-value{color:var(--tds-slider-disabled)}.tds-slider.disabled .tds-slider__input-values .tds-slider__input-field-wrapper{pointer-events:none}.tds-slider.disabled .tds-slider__input-values .tds-slider__input-field-wrapper input.tds-slider__input-field{color:var(--tds-slider-disabled);pointer-events:none}.tds-slider.disabled .tds-slider__value{display:none}.tds-slider.disabled .tds-slider__track .tds-slider__track-fill{background-color:var(--tds-slider-disabled)}.tds-slider.disabled .tds-slider__value-dividers .tds-slider__value-divider span{color:var(--tds-slider-disabled)}.tds-slider.disabled .tds-slider__thumb{pointer-events:none}.tds-slider.disabled .tds-slider__thumb .tds-slider__thumb-inner{background-color:var(--tds-slider-disabled);cursor:default}.tds-slider.tds-slider-small .tds-slider__thumb .tds-slider__thumb-inner{width:16px;height:16px}.tds-slider.tds-slider-small .tds-slider__thumb .tds-slider__thumb-inner::before{width:40px;height:40px}.tds-slider.tds-slider-small .tds-slider__thumb .tds-slider__thumb-inner.pressed{width:20px;height:20px}.tds-slider .tds-slider__controls .tds-slider__control{cursor:default}.tds-slider .tds-slider__controls .tds-slider__control.tds-slider__control-minus tds-icon,.tds-slider .tds-slider__controls .tds-slider__control.tds-slider__control-plus tds-icon{color:var(--tds-slider-controls-color)}.tds-slider.disabled .tds-slider__controls .tds-slider__control{cursor:default}.tds-slider.disabled .tds-slider__controls .tds-slider__control.tds-slider__control-minus tds-icon,.tds-slider.disabled .tds-slider__controls .tds-slider__control.tds-slider__control-plus tds-icon{color:var(--tds-slider-disabled)}\";\nconst TdsSliderStyle0 = sliderCss;\n\nconst TdsSlider = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsChange = createEvent(this, \"tdsChange\", 6);\n        this.tdsInput = createEvent(this, \"tdsInput\", 6);\n        this.wrapperElement = null;\n        this.thumbElement = null;\n        this.thumbInnerElement = null;\n        this.trackElement = null;\n        this.trackFillElement = null;\n        this.thumbGrabbed = false;\n        this.thumbLeft = 0;\n        this.tickValues = [];\n        this.useControls = false;\n        this.useInput = false;\n        this.useSmall = false;\n        this.useSnapping = false;\n        this.supposedValueSlot = -1;\n        this.resizeObserverAdded = false;\n        this.label = '';\n        this.value = '0';\n        this.min = '0';\n        this.max = '100';\n        this.ticks = '0';\n        this.showTickNumbers = false;\n        this.tooltip = false;\n        this.disabled = false;\n        this.readOnly = false;\n        this.controls = false;\n        this.input = false;\n        this.step = '1';\n        this.name = '';\n        this.thumbSize = 'lg';\n        this.snap = false;\n        this.sliderId = generateUniqueId();\n    }\n    /** Public method to re-initialise the slider if some configuration props are changed */\n    async reset() {\n        this.componentWillLoad();\n        this.componentDidLoad();\n    }\n    handleKeydown(event) {\n        switch (event.key) {\n            case 'ArrowLeft':\n            case 'ArrowDown':\n            case '-':\n                this.stepLeft(event);\n                break;\n            case 'ArrowRight':\n            case 'ArrowUp':\n            case '+':\n                this.stepRight(event);\n                break;\n        }\n    }\n    handleRelease(event) {\n        if (!this.thumbGrabbed) {\n            return;\n        }\n        this.thumbGrabbed = false;\n        this.thumbInnerElement.classList.remove('pressed');\n        this.updateValue(event);\n        this.trackElement.focus();\n    }\n    handleMove(event) {\n        if (event.type === 'touchmove') {\n            event.preventDefault();\n        }\n        if (!this.thumbGrabbed) {\n            return;\n        }\n        this.thumbCore(event);\n    }\n    handleValueUpdate(newValue) {\n        this.calculateThumbLeftFromValue(newValue);\n        this.value = newValue;\n        this.updateTrack();\n    }\n    updateSupposedValueSlot(localLeft) {\n        const numTicks = parseInt(this.ticks);\n        const trackWidth = this.getTrackWidth();\n        const distanceBetweenTicks = Math.round(trackWidth / (numTicks + 1));\n        const snappedLocalLeft = Math.round(localLeft / distanceBetweenTicks) * distanceBetweenTicks;\n        let thumbPositionPX = 0;\n        if (snappedLocalLeft >= 0 && snappedLocalLeft <= trackWidth) {\n            thumbPositionPX = snappedLocalLeft;\n        }\n        else if (snappedLocalLeft > trackWidth) {\n            thumbPositionPX = trackWidth;\n        }\n        else if (snappedLocalLeft < 0) {\n            thumbPositionPX = 0;\n        }\n        this.supposedValueSlot = Math.round(thumbPositionPX / distanceBetweenTicks);\n        return snappedLocalLeft;\n    }\n    thumbCore(event) {\n        const numTicks = parseInt(this.ticks);\n        const trackRect = this.trackElement.getBoundingClientRect();\n        let localLeft = 0;\n        if (event.type === 'mousemove') {\n            localLeft = event.clientX - trackRect.left;\n        }\n        else if (event.type === 'touchmove') {\n            localLeft = event.touches[0].clientX - trackRect.left;\n        }\n        else\n            console.warn('Slider component: Unsupported event!');\n        this.supposedValueSlot = -1;\n        if (this.useSnapping && numTicks > 0) {\n            localLeft = this.updateSupposedValueSlot(localLeft);\n        }\n        this.thumbLeft = this.constrainThumb(localLeft);\n        this.thumbElement.style.left = `${this.thumbLeft}px`;\n        this.updateValue(event);\n    }\n    updateTrack() {\n        const trackWidth = this.getTrackWidth();\n        const percentageFilled = (this.thumbLeft / trackWidth) * 100;\n        this.trackFillElement.style.width = `${percentageFilled}%`;\n    }\n    updateValue(event) {\n        const trackWidth = this.getTrackWidth();\n        const numTicks = parseInt(this.ticks);\n        /* if snapping (supposedValueSlot > 0) is enabled, make sure we display the supposed value (instead of maybe getting a -1/+1 depending on rounding)  */\n        if (this.useSnapping && numTicks) {\n            const supposedValue = this.tickValues[this.supposedValueSlot];\n            this.value = `${supposedValue}`;\n            this.calculateThumbLeftFromValue(supposedValue);\n        }\n        else {\n            const percentage = this.thumbLeft / trackWidth;\n            this.value = `${Math.trunc(parseFloat(this.min) + percentage * (parseFloat(this.max) - parseFloat(this.min)))}`;\n        }\n        this.updateTrack();\n        this.tdsInput.emit({ value: this.value });\n        /* Emit event after user has finished dragging the thumb */\n        if (event.type === 'touchend' || event.type === 'mouseup') {\n            this.tdsChange.emit({ value: this.value });\n        }\n    }\n    forceValueUpdate(newValue) {\n        this.calculateThumbLeftFromValue(newValue);\n        this.value = newValue;\n        this.tdsChange.emit({ value: this.value });\n        this.updateTrack();\n    }\n    constrainThumb(x) {\n        const width = this.getTrackWidth();\n        if (x < 0) {\n            return 0;\n        }\n        if (x > width) {\n            return width;\n        }\n        return x;\n    }\n    getTrackWidth() {\n        const trackRect = this.trackElement.getBoundingClientRect();\n        return trackRect.right - trackRect.left;\n    }\n    calculateThumbLeftFromValue(value) {\n        const initValue = value;\n        const trackWidth = this.getTrackWidth();\n        const normalizedValue = initValue - parseFloat(this.min);\n        const normalizedMax = parseFloat(this.max) - parseFloat(this.min);\n        const calculatedLeft = (normalizedValue / normalizedMax) * trackWidth;\n        this.thumbLeft = calculatedLeft;\n        this.updateSupposedValueSlot(this.thumbLeft);\n        this.thumbElement.style.left = `${this.thumbLeft}px`;\n    }\n    /** Updates the slider value based on the current input value */\n    updateSliderValueOnInputChange(event) {\n        const inputElement = event.target;\n        let newValue = parseInt(inputElement.value);\n        // Check if the new value is different from the current value\n        if (newValue === parseInt(this.value)) {\n            return; // Exit the function if the new value is the same as the current value\n        }\n        if (newValue < parseFloat(this.min)) {\n            newValue = parseFloat(this.min);\n        }\n        else if (newValue > parseFloat(this.max)) {\n            newValue = parseFloat(this.max);\n        }\n        this.forceValueUpdate(String(newValue));\n    }\n    /** Updates the slider value based on the current input value when enter is pressed */\n    handleInputFieldEnterPress(event) {\n        event.stopPropagation();\n        if (event.key === 'Enter') {\n            this.updateSliderValueOnInputChange(event);\n            const inputElement = event.target;\n            inputElement.blur();\n        }\n    }\n    grabThumb() {\n        if (this.readOnly) {\n            return;\n        }\n        this.thumbGrabbed = true;\n        this.thumbInnerElement.classList.add('pressed');\n    }\n    calculateInputSizeFromMax() {\n        return this.max.length;\n    }\n    controlsStep(delta, event) {\n        if (this.readOnly || this.disabled) {\n            return;\n        }\n        const numTicks = parseInt(this.ticks);\n        /* if snapping is enabled, instead just increment or decrement the current \"fixed\" value from our ticknumber array */\n        if (this.useSnapping && numTicks > 0) {\n            const stepDir = delta > 0 ? 1 : -1;\n            this.supposedValueSlot += stepDir;\n            if (this.supposedValueSlot < 0) {\n                this.supposedValueSlot = 0;\n            }\n            else if (this.supposedValueSlot > numTicks + 1) {\n                this.supposedValueSlot = numTicks + 1;\n            }\n            this.updateValue(event);\n        }\n        else {\n            const trackWidth = this.getTrackWidth();\n            const percentage = this.thumbLeft / trackWidth;\n            let currentValue = parseFloat(this.min) + percentage * (parseFloat(this.max) - parseFloat(this.min));\n            currentValue += delta;\n            currentValue = Math.round(currentValue);\n            if (currentValue < parseFloat(this.min)) {\n                currentValue = parseFloat(this.min);\n            }\n            else if (currentValue > parseFloat(this.max)) {\n                currentValue = parseFloat(this.max);\n            }\n            this.value = `${currentValue}`;\n            this.forceValueUpdate(this.value);\n        }\n    }\n    stepLeft(event) {\n        this.controlsStep(-parseInt(this.step), event);\n    }\n    stepRight(event) {\n        this.controlsStep(parseInt(this.step), event);\n    }\n    componentWillLoad() {\n        const numTicks = parseInt(this.ticks);\n        if (numTicks > 0) {\n            this.tickValues = [parseFloat(this.min)];\n            const step = (parseFloat(this.max) - parseFloat(this.min)) / (numTicks + 1);\n            for (let i = 1; i < numTicks + 1; i++) {\n                this.tickValues.push(parseFloat(this.min) + Math.round(step * i));\n            }\n            this.tickValues.push(parseFloat(this.max));\n        }\n        this.useInput = false;\n        this.useControls = false;\n        if (this.controls) {\n            this.useControls = true;\n        }\n        else if (this.input) {\n            this.useInput = true;\n        }\n        this.useSmall = this.thumbSize === 'sm';\n        this.useSnapping = this.snap;\n        const min = parseFloat(this.min);\n        const max = parseFloat(this.max);\n        if (min > max) {\n            console.warn('min-prop must have a higher value than max-prop for the component to work correctly.');\n            this.disabled = true;\n        }\n    }\n    componentDidLoad() {\n        if (!this.resizeObserverAdded) {\n            this.resizeObserverAdded = true;\n            const resizeObserver = new ResizeObserver(() => {\n                this.calculateThumbLeftFromValue(this.value);\n                this.updateTrack();\n            });\n            resizeObserver.observe(this.wrapperElement);\n        }\n        this.calculateThumbLeftFromValue(this.value);\n        this.updateTrack();\n    }\n    render() {\n        return (h(\"div\", { key: 'bf3ca081d01c6eac5907fe1ebef8ae5f14fa87da', class: {\n                'tds-slider-wrapper': true,\n                'read-only': this.readOnly,\n            } }, h(\"input\", { key: '0fb204f882d1905461354f2b75ff4fc374ffa9c9', class: \"tds-slider-native-element\", type: \"range\", name: this.name, min: this.min, max: this.max, value: this.value, disabled: this.disabled }), h(\"div\", { key: '6ea9c5efc3a9d590c36b9b9f40bbd2401b9c2dfc', class: {\n                'tds-slider': true,\n                'disabled': this.disabled,\n                'tds-slider-small': this.useSmall,\n            }, ref: (el) => {\n                this.wrapperElement = el;\n            } }, h(\"label\", { key: '738c0dcf07e3d99a49443f1d501ccaa278653a8d', class: this.showTickNumbers && 'offset' }, this.label), this.useInput && (h(\"div\", { class: \"tds-slider__input-values\" }, h(\"div\", { class: \"tds-slider__input-value min-value\" }, this.min))), this.useControls && (h(\"div\", { class: \"tds-slider__controls\" }, h(\"div\", { class: \"tds-slider__control tds-slider__control-minus\", onClick: (event) => this.stepLeft(event) }, h(\"tds-icon\", { name: \"minus\", size: \"16px\" })))), h(\"div\", { key: '999c32a0970e2ec7ab2a601b168ddcf5a0a74bcc', class: \"tds-slider-inner\" }, this.tickValues.length > 0 && (h(\"div\", { class: \"tds-slider__value-dividers-wrapper\" }, h(\"div\", { class: \"tds-slider__value-dividers\" }, this.tickValues.map((value) => (h(\"div\", { class: \"tds-slider__value-divider\" }, this.showTickNumbers && h(\"span\", null, value))))))), h(\"div\", { key: '57ecf12b107bf4f4b0b23134ad2820a01063e624', class: \"tds-slider__track\", ref: (el) => {\n                this.trackElement = el;\n            }, tabindex: this.disabled ? '-1' : '0' }, h(\"div\", { key: 'd12fc549e7e503865fd3a1505c4a51476d769908', class: \"tds-slider__track-fill\", ref: (el) => {\n                this.trackFillElement = el;\n            } }), h(\"div\", { key: 'ecc291e9e4aeb3c813f866e3a58615184ef21c35', class: \"tds-slider__thumb\", ref: (el) => {\n                this.thumbElement = el;\n            }, onMouseDown: () => this.grabThumb(), onTouchStart: () => this.grabThumb() }, this.tooltip && (h(\"div\", { class: \"tds-slider__value\" }, this.value, h(\"svg\", { width: \"18\", height: \"14\", viewBox: \"0 0 18 14\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" }, h(\"path\", { d: \"M8.15882 12.6915L0.990487 1.54076C0.562658 0.875246 1.0405 0 1.83167 0H16.1683C16.9595 0 17.4373 0.875246 17.0095 1.54076L9.84118 12.6915C9.44754 13.3038 8.55246 13.3038 8.15882 12.6915Z\", fill: \"currentColor\" })))), h(\"div\", { key: '403b0ea3f2ca18469a3e8ef32a2a8468d1a2e82c', class: \"tds-slider__thumb-inner\", ref: (el) => {\n                this.thumbInnerElement = el;\n            } })))), this.useInput && (h(\"div\", { class: \"tds-slider__input-values\" }, h(\"div\", { class: \"tds-slider__input-value\", onClick: (event) => this.stepLeft(event) }, this.max), h(\"div\", { class: \"tds-slider__input-field-wrapper\" }, h(\"input\", { size: this.calculateInputSizeFromMax(), class: \"tds-slider__input-field\", value: this.value, readOnly: this.readOnly, onBlur: (event) => this.updateSliderValueOnInputChange(event), onKeyDown: (event) => this.handleInputFieldEnterPress(event), type: \"number\", min: this.min, max: this.max })))), this.useControls && (h(\"div\", { class: \"tds-slider__controls\" }, h(\"div\", { class: \"tds-slider__control tds-slider__control-plus\", onClick: (event) => this.stepRight(event) }, h(\"tds-icon\", { name: \"plus\", size: \"16px\" })))))));\n    }\n    static get watchers() { return {\n        \"value\": [\"handleValueUpdate\"]\n    }; }\n};\nTdsSlider.style = TdsSliderStyle0;\n\nexport { TdsSlider as tds_slider };\n"],"names":["generateUniqueId","now","Date","timeInMilliseconds","getMinutes","getSeconds","getMilliseconds","randomNum1","Math","floor","random","randomNum2","toString","substring","TdsSlider","constructor","hostRef","registerInstance","this","tdsChange","createEvent","tdsInput","wrapperElement","thumbElement","thumbInnerElement","trackElement","trackFillElement","thumbGrabbed","thumbLeft","tickValues","useControls","useInput","useSmall","useSnapping","supposedValueSlot","resizeObserverAdded","label","value","min","max","ticks","showTickNumbers","tooltip","disabled","readOnly","controls","input","step","name","thumbSize","snap","sliderId","reset","componentWillLoad","componentDidLoad","handleKeydown","event","key","stepLeft","stepRight","handleRelease","classList","remove","updateValue","focus","handleMove","type","preventDefault","thumbCore","handleValueUpdate","newValue","calculateThumbLeftFromValue","updateTrack","updateSupposedValueSlot","localLeft","numTicks","parseInt","trackWidth","getTrackWidth","distanceBetweenTicks","round","snappedLocalLeft","thumbPositionPX","trackRect","getBoundingClientRect","clientX","left","touches","console","warn","constrainThumb","style","concat","percentageFilled","width","supposedValue","percentage","trunc","parseFloat","emit","forceValueUpdate","x","right","initValue","calculatedLeft","updateSliderValueOnInputChange","inputElement","target","String","handleInputFieldEnterPress","stopPropagation","blur","grabThumb","add","calculateInputSizeFromMax","length","controlsStep","delta","stepDir","currentValue","i","push","ResizeObserver","observe","render","h","class","ref","el","onClick","size","map","tabindex","onMouseDown","onTouchStart","height","viewBox","fill","xmlns","d","onBlur","onKeyDown","watchers"],"sourceRoot":""}