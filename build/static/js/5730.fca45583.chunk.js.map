{"version":3,"file":"static/js/5730.fca45583.chunk.js","mappings":"mLAEA,MAGMA,EAAe,MACjBC,WAAAA,CAAYC,IACRC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,UAAW,EAChBD,KAAKE,UAAW,CACpB,CAEA,iBAAMC,CAAYD,GACdF,KAAKE,SAAWA,CACpB,CACAE,MAAAA,GACI,OAAQC,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,CAAEC,IAAK,2CAA4CC,KAAM,aAAcH,EAAAA,EAAAA,GAAE,MAAO,CAAEE,IAAK,2CAA4CE,MAAO,oBAAFC,OAAsBV,KAAKE,SAAW,WAAa,GAAE,iBAAAQ,OACxMV,KAAKC,SAAW,WAAa,MAAQI,EAAAA,EAAAA,GAAE,OAAQ,CAAEE,IAAK,8CAC/D,GAEJX,EAAae,MAlBQ,2iD","sources":["../node_modules/@scania/tegel/dist/esm/tds-inline-tab.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-529974bd.js';\n\nconst inlineTabCss = \":host{box-sizing:border-box;display:block;position:relative}:host *{box-sizing:border-box}:host ::slotted(*){all:unset;font:var(--tds-headline-07) !important;letter-spacing:var(--tds-headline-07-ls) !important;color:var(--tds-navigation-tabs-tab-color);text-decoration:none;display:block;position:relative;transition:color 0.15s ease-in-out 0s;white-space:nowrap;background-color:transparent;border:0;width:100%;padding:20px 4px}:host ::slotted(*:focus-visible)::before{content:\\\"\\\";position:absolute;left:0;right:0;top:20px;bottom:20px;outline:2px solid var(--tds-blue-400)}:host .inline-tab-item:not(.selected)::after{width:0%;transition:width 0.15s ease-in-out 0s}:host .inline-tab-item{position:relative;margin-right:32px}:host .inline-tab-item:hover{cursor:pointer}:host .inline-tab-item:hover::after{width:100%}:host .inline-tab-item::after{content:\\\" \\\";position:absolute;bottom:0;right:0;left:0;margin-left:auto;width:0%;margin-right:auto;height:2px;background-color:var(--tds-inline-tabs-tab-indicator-background-hover);z-index:1}:host .selected ::slotted(*){color:var(--tds-inline-tabs-tab-color-selected)}:host .selected::after{width:100%;background-color:var(--tds-inline-tabs-tab-indicator-background-active)}:host .disabled{color:var(--tds-inline-tabs-tab-color-disabled)}:host .disabled ::slotted(*){opacity:var(--tds-inline-tabs-tab-color-opacity-disabled)}:host .disabled::after{content:none}:host .disabled ::slotted(*:hover){cursor:not-allowed}:host .disabled ::slotted(*:focus-visible){outline:none}:host(.first){margin-left:32px}:host(.last){margin-right:32px}\";\nconst TdsInlineTabStyle0 = inlineTabCss;\n\nconst TdsInlineTab = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.disabled = false;\n        this.selected = false;\n    }\n    /** @internal Method to set the Tab as selected. Used by the <tds-inline-tabs> */\n    async setSelected(selected) {\n        this.selected = selected;\n    }\n    render() {\n        return (h(Host, { key: '5f6c3c68e4355801030c8bf2a9eb7650028db392', role: \"listitem\" }, h(\"div\", { key: '913d4e8af5aa0b4810bc510bd6521ec98d555d60', class: `inline-tab-item  ${this.selected ? 'selected' : ''}\n           ${this.disabled ? 'disabled' : ''}` }, h(\"slot\", { key: 'ec29b967f9386151b89a9ae6e390b3ab024b8471' }))));\n    }\n};\nTdsInlineTab.style = TdsInlineTabStyle0;\n\nexport { TdsInlineTab as tds_inline_tab };\n"],"names":["TdsInlineTab","constructor","hostRef","registerInstance","this","disabled","selected","setSelected","render","h","Host","key","role","class","concat","style"],"sourceRoot":""}