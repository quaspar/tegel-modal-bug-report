{"version":3,"file":"static/js/5187.cf3d2db1.chunk.js","mappings":"gIAaA,SAASA,IACL,MAAMC,EAAM,IAAIC,KACVC,EAAwC,IAAnBF,EAAIG,aAA0C,IAAnBH,EAAII,aAAsBJ,EAAIK,kBAC9EC,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,IAAhBD,KAAKE,UAKnC,OAHqBH,EAAWK,SAAS,IAAIC,UAAU,GACnDV,EAAmBS,SAAS,IAC5BD,EAAWC,SAAS,IAAIC,UAAU,EAE1C,C,kDCjBA,MAAMC,EAAUA,CAACC,EAAUC,MAAcA,EAAQC,cAAc,UAADC,OAAWH,EAAQ,M,kFCFjF,MAGMI,EAAU,MACZC,WAAAA,CAAYC,IACRC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,WAAYC,EAAAA,EAAAA,GAAYF,KAAM,YAAa,GAChDA,KAAKG,UAAWD,EAAAA,EAAAA,GAAYF,KAAM,WAAY,GAC9CA,KAAKI,aAAe,KACE,aAAdJ,KAAKK,KAELL,KAAKM,SAAWN,KAAKM,QAEF,UAAdN,KAAKK,KAEVL,KAAKM,SAAU,EAGfC,QAAQC,MAAM,uCAElBR,KAAKC,UAAUQ,KAAK,CAChBC,OAAQV,KAAKU,OACbJ,QAASN,KAAKM,QACdK,MAAOX,KAAKW,OACd,EAENX,KAAKY,YAAc,KACfZ,KAAKG,SAASM,KAAK,CACfC,OAAQV,KAAKU,QACf,EAENV,KAAKK,KAAO,SACZL,KAAKa,KAAO,KACZb,KAAKU,QAASjC,EAAAA,EAAAA,KACduB,KAAKM,SAAU,EACfN,KAAKc,UAAOC,EACZf,KAAKW,WAAQI,CACjB,CACAC,qBAAAA,GACI,MAAkB,WAAdhB,KAAKK,KACE,CACHM,MAAOX,KAAKW,MACZL,QAASN,KAAKM,QACdQ,KAAMd,KAAKc,KACXG,SAAUA,IAAMjB,KAAKI,gBAGtB,CACHc,QAASA,IAAMlB,KAAKY,cAE5B,CACAO,MAAAA,GACI,MAAMC,EAAkBpB,KAAKgB,wBACvBK,GAAgB9B,EAAAA,EAAAA,GAAQ,SAAUS,KAAKsB,MACvCC,GAAehC,EAAAA,EAAAA,GAAQ,QAASS,KAAKsB,MACrCE,GAAgBjC,EAAAA,EAAAA,GAAQ,SAAUS,KAAKsB,MAC7C,OAAQG,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,CAAEC,IAAK,6CAA8CF,EAAAA,EAAAA,GAAE,MAAO,CAAEE,IAAK,2CAA4CC,MAAO,cAAeH,EAAAA,EAAAA,GAAE,MAAO,CAAEE,IAAK,2CAA4CC,MAAO,CAClN,sBAAsB,EACtB,GAAoB,OAAd5B,KAAKa,KACX,GAAoB,OAAdb,KAAKa,KACX,OAAUQ,EACV,OAAUG,KACTC,EAAAA,EAAAA,GAAE,QAASI,OAAOC,OAAO,CAAEH,IAAK,2CAA4CtB,KAAML,KAAKK,KAAM0B,GAAI/B,KAAKU,QAAUU,KAAmBK,EAAAA,EAAAA,GAAE,QAAS,CAAEE,IAAK,2CAA4CT,QAAUc,GAAUA,EAAMC,kBAAmBC,QAASlC,KAAKU,QAAUW,IAAiBI,EAAAA,EAAAA,GAAE,OAAQ,CAAEX,KAAM,WAAaS,IAAgBE,EAAAA,EAAAA,GAAE,OAAQ,CAAEX,KAAM,UAAYU,IAAiBC,EAAAA,EAAAA,GAAE,OAAQ,CAAEX,KAAM,cACpZ,CACA,QAAIQ,GAAS,OAAOa,EAAAA,EAAAA,GAAWnC,KAAO,GAE1CJ,EAAQwC,MAlEQ,8oE","sources":["../node_modules/@scania/tegel/dist/esm/generateUniqueId-7934d315.js","../node_modules/@scania/tegel/dist/esm/hasSlot-d52114d0.js","../node_modules/@scania/tegel/dist/esm/tds-chip.entry.js"],"sourcesContent":["/**\n * Generates a reasonably unique string ID based on current time (minutes, seconds, milliseconds) and random numbers.\n *\n * This function combines the current time and random numbers to generate\n * a unique string ID. The function assumes that it won't be called frequently\n * enough to generate two identical IDs within a millisecond, or that the random\n * number generator will produce the same value twice in quick succession.\n *\n * Note: The IDs generated by this function are not globally unique and their length may vary.\n * For truly unique and fixed-length IDs, consider using a more robust method such as UUID.\n *\n * @returns {string} A unique string ID.\n */\nfunction generateUniqueId() {\n    const now = new Date();\n    const timeInMilliseconds = now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds(); // Get current time in milliseconds from the start of the hour\n    const randomNum1 = Math.floor(Math.random() * 1000000); // Random number between 0 and 999999\n    const randomNum2 = Math.floor(Math.random() * 1000000); // Another random number\n    // Convert to base 36 (using numbers and letters) and remove '0.' from the random number\n    const uniqueString = randomNum1.toString(36).substring(2) +\n        timeInMilliseconds.toString(36) +\n        randomNum2.toString(36).substring(2);\n    return uniqueString;\n}\n\nexport { generateUniqueId as g };\n","/**\n * Checks if the provided element has a slotted element\n * in the slot with the corresponding slotName\n * @param slotName the name of the slot.\n * @param element the element to look for the slot within.\n */\nconst hasSlot = (slotName, element) => !!element.querySelector(`[slot=\"${slotName}\"]`);\n\nexport { hasSlot as h };\n","import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-529974bd.js';\nimport { g as generateUniqueId } from './generateUniqueId-7934d315.js';\nimport { h as hasSlot } from './hasSlot-d52114d0.js';\n\nconst chipCss = \".sc-tds-chip-s>*{display:inline-flex;align-items:center}.sc-tds-chip-h.sc-tds-chip-s>[slot=label],.sc-tds-chip-h .sc-tds-chip-s>[slot=label]{padding-top:2px}.component.sc-tds-chip .tds-chip-component.sc-tds-chip{display:inline-flex}.component.sc-tds-chip .tds-chip-component.sc-tds-chip label.sc-tds-chip{background-color:var(--tds-chips-background);color:var(--tds-chips-color);font:var(--tds-detail-02);letter-spacing:var(--tds-detail-02-ls);display:inline-flex;align-items:center;border-radius:16px;cursor:pointer;white-space:nowrap}.component.sc-tds-chip .tds-chip-component.sc-tds-chip label.sc-tds-chip:hover{background-color:var(--tds-chips-background-hover)}.component.sc-tds-chip .tds-chip-component.lg.sc-tds-chip label.sc-tds-chip{height:32px;padding:0 16px;gap:8px}.component.sc-tds-chip .tds-chip-component.sm.sc-tds-chip label.sc-tds-chip{height:24px;padding:0 12px;gap:6px}.component.sc-tds-chip .tds-chip-component.sm.prefix.sc-tds-chip label.sc-tds-chip{padding:0 12px 0 6px}.component.sc-tds-chip .tds-chip-component.sm.suffix.sc-tds-chip label.sc-tds-chip{padding:0 6px 0 12px}.component.sc-tds-chip .tds-chip-component.lg.prefix.sc-tds-chip label.sc-tds-chip{padding:0 16px 0 8px}.component.sc-tds-chip .tds-chip-component.lg.suffix.sc-tds-chip label.sc-tds-chip{padding:0 8px 0 16px}.component.sc-tds-chip .tds-chip-component.lg.prefix.suffix.sc-tds-chip label.sc-tds-chip{padding:0 8px}.component.sc-tds-chip .tds-chip-component.sm.prefix.suffix.sc-tds-chip label.sc-tds-chip{padding:0 6px}.component.sc-tds-chip .tds-chip-component.sc-tds-chip input.sc-tds-chip{opacity:0;position:absolute;z-index:-1}.component.sc-tds-chip .tds-chip-component.sc-tds-chip input.sc-tds-chip:focus-visible+label.sc-tds-chip{outline:2px solid var(--tds-blue-400);outline-offset:-2px;background-color:var(--tds-chips-background-focus)}.component.sc-tds-chip .tds-chip-component.sc-tds-chip input.sc-tds-chip:checked+label.sc-tds-chip{background-color:var(--tds-chips-background-active);color:var(--tds-chips-color-active)}.component.sc-tds-chip .tds-chip-component.sc-tds-chip input.sc-tds-chip:checked+label.sc-tds-chip:hover{background-color:var(--tds-chips-background-active-hover)}\";\nconst TdsChipStyle0 = chipCss;\n\nconst TdsChip = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsChange = createEvent(this, \"tdsChange\", 6);\n        this.tdsClick = createEvent(this, \"tdsClick\", 6);\n        this.handleChange = () => {\n            if (this.type === 'checkbox') {\n                // Toggle the prop on click\n                this.checked = !this.checked;\n            }\n            else if (this.type === 'radio') {\n                // Always set it to true to enforce visual update for selected state\n                this.checked = true;\n            }\n            else {\n                console.error('Unsupported type in Chip component!');\n            }\n            this.tdsChange.emit({\n                chipId: this.chipId,\n                checked: this.checked,\n                value: this.value,\n            });\n        };\n        this.handleClick = () => {\n            this.tdsClick.emit({\n                chipId: this.chipId,\n            });\n        };\n        this.type = 'button';\n        this.size = 'lg';\n        this.chipId = generateUniqueId();\n        this.checked = false;\n        this.name = undefined;\n        this.value = undefined;\n    }\n    renderInputAttributes() {\n        if (this.type !== 'button') {\n            return {\n                value: this.value,\n                checked: this.checked,\n                name: this.name,\n                onChange: () => this.handleChange(),\n            };\n        }\n        return {\n            onClick: () => this.handleClick(),\n        };\n    }\n    render() {\n        const inputAttributes = this.renderInputAttributes();\n        const hasPrefixSlot = hasSlot('prefix', this.host);\n        const hasLabelSlot = hasSlot('label', this.host);\n        const hasSuffixSlot = hasSlot('suffix', this.host);\n        return (h(Host, { key: '9bbcbc750f70b6644985fab7c3e480d626c77e02' }, h(\"div\", { key: '37633a4897ae7a657e65474a4aa1525ec1d3ee85', class: \"component\" }, h(\"div\", { key: '89239d3f8f0e215f91154927b65ae054eacfcbd2', class: {\n                'tds-chip-component': true,\n                'sm': this.size === 'sm',\n                'lg': this.size === 'lg',\n                'prefix': hasPrefixSlot,\n                'suffix': hasSuffixSlot,\n            } }, h(\"input\", Object.assign({ key: '09f4aa0094cababe19a96e1a3c33d96d75bb97fc', type: this.type, id: this.chipId }, inputAttributes)), h(\"label\", { key: '2a45508bf2ae0dcf28d02d049815022154c17cb0', onClick: (event) => event.stopPropagation(), htmlFor: this.chipId }, hasPrefixSlot && h(\"slot\", { name: \"prefix\" }), hasLabelSlot && h(\"slot\", { name: \"label\" }), hasSuffixSlot && h(\"slot\", { name: \"suffix\" }))))));\n    }\n    get host() { return getElement(this); }\n};\nTdsChip.style = TdsChipStyle0;\n\nexport { TdsChip as tds_chip };\n"],"names":["generateUniqueId","now","Date","timeInMilliseconds","getMinutes","getSeconds","getMilliseconds","randomNum1","Math","floor","random","randomNum2","toString","substring","hasSlot","slotName","element","querySelector","concat","TdsChip","constructor","hostRef","registerInstance","this","tdsChange","createEvent","tdsClick","handleChange","type","checked","console","error","emit","chipId","value","handleClick","size","name","undefined","renderInputAttributes","onChange","onClick","render","inputAttributes","hasPrefixSlot","host","hasLabelSlot","hasSuffixSlot","h","Host","key","class","Object","assign","id","event","stopPropagation","htmlFor","getElement","style"],"sourceRoot":""}