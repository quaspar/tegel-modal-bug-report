{"version":3,"file":"static/js/8479.56c5c6cb.chunk.js","mappings":"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","sources":["../node_modules/@scania/tegel/dist/esm/generateUniqueId-7934d315.js","../node_modules/@scania/tegel/dist/esm/hasSlot-d52114d0.js","../node_modules/@scania/tegel/dist/esm/tds-card.entry.js"],"sourcesContent":["/**\n * Generates a reasonably unique string ID based on current time (minutes, seconds, milliseconds) and random numbers.\n *\n * This function combines the current time and random numbers to generate\n * a unique string ID. The function assumes that it won't be called frequently\n * enough to generate two identical IDs within a millisecond, or that the random\n * number generator will produce the same value twice in quick succession.\n *\n * Note: The IDs generated by this function are not globally unique and their length may vary.\n * For truly unique and fixed-length IDs, consider using a more robust method such as UUID.\n *\n * @returns {string} A unique string ID.\n */\nfunction generateUniqueId() {\n    const now = new Date();\n    const timeInMilliseconds = now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds(); // Get current time in milliseconds from the start of the hour\n    const randomNum1 = Math.floor(Math.random() * 1000000); // Random number between 0 and 999999\n    const randomNum2 = Math.floor(Math.random() * 1000000); // Another random number\n    // Convert to base 36 (using numbers and letters) and remove '0.' from the random number\n    const uniqueString = randomNum1.toString(36).substring(2) +\n        timeInMilliseconds.toString(36) +\n        randomNum2.toString(36).substring(2);\n    return uniqueString;\n}\n\nexport { generateUniqueId as g };\n","/**\n * Checks if the provided element has a slotted element\n * in the slot with the corresponding slotName\n * @param slotName the name of the slot.\n * @param element the element to look for the slot within.\n */\nconst hasSlot = (slotName, element) => !!element.querySelector(`[slot=\"${slotName}\"]`);\n\nexport { hasSlot as h };\n","import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-529974bd.js';\nimport { g as generateUniqueId } from './generateUniqueId-7934d315.js';\nimport { h as hasSlot } from './hasSlot-d52114d0.js';\n\nconst cardCss = \".card{box-sizing:border-box;box-shadow:var(--tds-card-box);background-color:var(--tds-card-background);display:block;border-radius:4px;overflow:hidden}.card *{box-sizing:border-box}.card.clickable:hover{box-shadow:var(--tds-card-box-hover);cursor:pointer}.card .card-header{font:var(--tds-headline-06);letter-spacing:var(--tds-headline-06-ls);padding:16px;display:flex;align-items:center}.card .card-header slot[name=thumbnail]::slotted(*){width:36px;height:36px;border-radius:100%;margin-right:16px}.card .card-header .card-top-header{padding-left:16px;display:flex;flex-direction:column}.card .card-header .card-top-header.no-header-img{padding-left:0}.card .card-header.below{padding-top:16px}.card .header-subheader{display:flex;flex-direction:column;gap:4px}.card .header-subheader .header,.card .header-subheader slot[name=header]{color:var(--tds-card-headline)}.card .header-subheader .subheader,.card .header-subheader slot[name=subheader]{color:var(--tds-card-sub-headline)}.card .card-body-img{width:100%}.card .tds-divider{margin:16px 16px 0;background-color:var(--tds-card-divider);height:1px}.card .card-body{display:block;word-wrap:break-word}.card slot[name=body]::slotted(*){font:var(--tds-detail-03) !important;letter-spacing:var(--tds-detail-03-ls) !important;color:var(--tds-card-body-color);padding:0 16px;margin-bottom:16px;margin-top:16px;max-width:336px}.card slot[name=actions]::slotted(*){display:flex;padding:16px;color:var(--tds-card-icon-color)}button{width:100%;border:none;text-align:left;padding:0}button:focus-visible{outline:2px solid var(--tds-blue-400);outline-offset:-2px}button:active{box-shadow:var(--tds-card-box-pressed)}\";\nconst TdsCardStyle0 = cardCss;\n\nconst TdsCard = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsClick = createEvent(this, \"tdsClick\", 6);\n        this.handleClick = () => {\n            this.tdsClick.emit({\n                cardId: this.cardId,\n            });\n        };\n        this.getCardHeader = () => {\n            const usesHeaderSlot = hasSlot('header', this.host);\n            const usesSubheaderSlot = hasSlot('subheader', this.host);\n            const usesThumbnailSlot = hasSlot('thumbnail', this.host);\n            return (h(\"div\", { class: \"card-header\" }, usesThumbnailSlot && h(\"slot\", { name: \"thumbnail\" }), h(\"div\", { class: \"header-subheader\" }, this.header && h(\"span\", { class: \"header\" }, this.header), usesHeaderSlot && h(\"slot\", { name: \"header\" }), this.subheader && h(\"span\", { class: \"subheader\" }, this.subheader), usesSubheaderSlot && h(\"slot\", { name: \"subheader\" }))));\n        };\n        this.getCardContent = () => {\n            const usesBodySlot = hasSlot('body', this.host);\n            const usesBodyImageSlot = hasSlot('body-image', this.host);\n            const usesActionsSlot = hasSlot('actions', this.host);\n            return (h(\"div\", null, this.imagePlacement === 'below-header' && this.getCardHeader(), h(\"div\", { class: `card-body` }, usesBodyImageSlot && h(\"slot\", { name: \"body-image\" }), this.bodyImg && h(\"img\", { class: \"card-body-img\", src: this.bodyImg, alt: this.bodyImgAlt }), this.imagePlacement === 'above-header' && this.getCardHeader(), this.bodyDivider && h(\"tds-divider\", null), usesBodySlot && h(\"slot\", { name: \"body\" })), usesActionsSlot && h(\"slot\", { name: `actions` })));\n        };\n        this.modeVariant = null;\n        this.imagePlacement = 'below-header';\n        this.header = undefined;\n        this.subheader = undefined;\n        this.bodyImg = undefined;\n        this.bodyImgAlt = undefined;\n        this.bodyDivider = false;\n        this.clickable = false;\n        this.cardId = generateUniqueId();\n    }\n    render() {\n        return (h(Host, { key: '9c5083535652428bb360891eea04a41bf49d1f01', class: this.modeVariant && `tds-mode-variant-${this.modeVariant}` }, this.clickable ? (h(\"button\", { class: `card ${this.clickable ? 'clickable' : ''} ${this.imagePlacement}`, onClick: () => {\n                if (this.clickable) {\n                    this.handleClick();\n                }\n            } }, this.getCardContent())) : (h(\"div\", { class: `card ${this.clickable ? 'clickable' : ''} ${this.imagePlacement}` }, this.getCardContent()))));\n    }\n    get host() { return getElement(this); }\n};\nTdsCard.style = TdsCardStyle0;\n\nexport { TdsCard as tds_card };\n"],"names":["generateUniqueId","now","Date","timeInMilliseconds","getMinutes","getSeconds","getMilliseconds","randomNum1","Math","floor","random","randomNum2","toString","substring","hasSlot","slotName","element","querySelector","concat","TdsCard","constructor","hostRef","registerInstance","this","tdsClick","createEvent","handleClick","emit","cardId","getCardHeader","usesHeaderSlot","host","usesSubheaderSlot","usesThumbnailSlot","h","class","name","header","subheader","getCardContent","usesBodySlot","usesBodyImageSlot","usesActionsSlot","imagePlacement","bodyImg","src","alt","bodyImgAlt","bodyDivider","modeVariant","undefined","clickable","render","Host","key","onClick","getElement","style"],"sourceRoot":""}