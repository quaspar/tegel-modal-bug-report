{"version":3,"file":"static/js/790.a169b0a5.chunk.js","mappings":"8JAOA,MAAMA,EAAiB,CACnB,OACA,wBACA,cACA,oBACA,oBACA,8BACA,YACA,eACA,gBACA,gBACA,oBACA,eACA,gBACA,eACA,mBACA,mBACA,eACA,gBACA,oBACA,gBACA,cACA,gBACA,cACA,eACA,oBACA,aACA,kBACA,aACA,YACA,iBACA,uBACA,mBACA,YACA,mBACA,gBACA,eACA,gBACA,gBACA,gBACA,uBACA,gBACA,gBACA,oBACA,eACA,gBACA,eACA,YACA,gBACA,gBACA,gBACA,kBASEC,EAAwBA,CAACC,EAAIC,KAC/B,IAAIC,EAAsBJ,EAI1B,OAHIG,GAAcA,EAAWE,OAAS,IAClCD,EAAsBA,EAAoBE,QAAQC,IAAUJ,EAAWK,SAASD,OAE7EE,EAAAA,EAAAA,GAAkBP,EAAIE,EAAoB,C,kCC9DrD,MAAMK,EAAoB,SAACP,GACvB,MAAMQ,EAAkB,CAAC,EAUzB,OAXqCC,UAAAN,OAAA,QAAAO,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAE7BE,SAASN,IAChB,GAAIL,EAAGY,aAAaP,GAAO,CAET,OADAL,EAAGa,aAAaR,KAE1BG,EAAgBH,GAAQL,EAAGa,aAAaR,IAE5CL,EAAGc,gBAAgBT,EACvB,KAEGG,CACX,C,yFClBA,MAGMO,EAAyB,MAC3BC,WAAAA,CAAYC,IACRC,EAAAA,EAAAA,GAAiBC,KAAMF,EAC3B,CACAG,MAAAA,GACI,MAAMC,EAAcC,OAAOC,OAAO,CAAE,aAAc,UAAWxB,EAAAA,EAAAA,GAAsBoB,KAAKK,OACxF,OAAQC,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,CAAEC,IAAK,6CAA8CF,EAAAA,EAAAA,GAAE,SAAUH,OAAOC,OAAO,CAAEI,IAAK,4CAA8CN,IAAcI,EAAAA,EAAAA,GAAE,WAAY,CAAEE,IAAK,2CAA4CC,KAAM,QAASC,KAAM,UAC5P,CACA,QAAIL,GAAS,OAAOM,EAAAA,EAAAA,GAAWX,KAAO,GAE1CJ,EAAuBgB,MAbQ,0kB","sources":["../node_modules/@scania/tegel/dist/esm/inheritAriaAttributes-04f2f252.js","../node_modules/@scania/tegel/dist/esm/inheritAttributes-d21e267b.js","../node_modules/@scania/tegel/dist/esm/tds-side-menu-close-button.entry.js"],"sourcesContent":["import { i as inheritAttributes } from './inheritAttributes-d21e267b.js';\n\n/**\n * List of available ARIA attributes + `role`.\n * Removed deprecated attributes.\n * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\n */\nconst ariaAttributes = [\n    'role',\n    'aria-activedescendant',\n    'aria-atomic',\n    'aria-autocomplete',\n    'aria-braillelabel',\n    'aria-brailleroledescription',\n    'aria-busy',\n    'aria-checked',\n    'aria-colcount',\n    'aria-colindex',\n    'aria-colindextext',\n    'aria-colspan',\n    'aria-controls',\n    'aria-current',\n    'aria-describedby',\n    'aria-description',\n    'aria-details',\n    'aria-disabled',\n    'aria-errormessage',\n    'aria-expanded',\n    'aria-flowto',\n    'aria-haspopup',\n    'aria-hidden',\n    'aria-invalid',\n    'aria-keyshortcuts',\n    'aria-label',\n    'aria-labelledby',\n    'aria-level',\n    'aria-live',\n    'aria-multiline',\n    'aria-multiselectable',\n    'aria-orientation',\n    'aria-owns',\n    'aria-placeholder',\n    'aria-posinset',\n    'aria-pressed',\n    'aria-readonly',\n    'aria-relevant',\n    'aria-required',\n    'aria-roledescription',\n    'aria-rowcount',\n    'aria-rowindex',\n    'aria-rowindextext',\n    'aria-rowspan',\n    'aria-selected',\n    'aria-setsize',\n    'aria-sort',\n    'aria-valuemax',\n    'aria-valuemin',\n    'aria-valuenow',\n    'aria-valuetext',\n];\n/**\n * Returns an array of aria attributes that should be copied from\n * the shadow host element to a target within the light DOM.\n * @param el The element that the attributes should be copied from.\n * @param ignoreList The list of aria-attributes to ignore reflecting and removing from the host.\n * Use this in instances where we manually specify aria attributes on the `<Host>` element.\n */\nconst inheritAriaAttributes = (el, ignoreList) => {\n    let attributesToInherit = ariaAttributes;\n    if (ignoreList && ignoreList.length > 0) {\n        attributesToInherit = attributesToInherit.filter((attr) => !ignoreList.includes(attr));\n    }\n    return inheritAttributes(el, attributesToInherit);\n};\n\nexport { inheritAriaAttributes as i };\n","/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n    const attributeObject = {};\n    attributes.forEach((attr) => {\n        if (el.hasAttribute(attr)) {\n            const value = el.getAttribute(attr);\n            if (value !== null) {\n                attributeObject[attr] = el.getAttribute(attr);\n            }\n            el.removeAttribute(attr);\n        }\n    });\n    return attributeObject;\n};\n\nexport { inheritAttributes as i };\n","import { r as registerInstance, h, H as Host, g as getElement } from './index-529974bd.js';\nimport { i as inheritAriaAttributes } from './inheritAriaAttributes-04f2f252.js';\nimport './inheritAttributes-d21e267b.js';\n\nconst sideMenuCloseButtonCss = \":host button{height:64px;width:100%;text-align:left;padding:0 24px;border:none;background-color:var(--tds-sidebar-side-menu-background-cover);font:var(--tds-headline-07);letter-spacing:var(--tds-headline-07-ls);color:var(--tds-sidebar-side-menu-single-item-color);display:flex;align-items:center;border-bottom:1px solid var(--tds-sidebar-side-menu-bottom-menu-border-top)}:host button:hover{cursor:pointer;background-color:var(--tds-sidebar-item-state-hover)}:host button:focus-visible{cursor:pointer;border:1px solid var(--tds-sidebar-side-menu-single-subitem-selected-border-color)}\";\nconst TdsSideMenuCloseButtonStyle0 = sideMenuCloseButtonCss;\n\nconst TdsSideMenuCloseButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    render() {\n        const buttonProps = Object.assign({ 'aria-label': 'Close' }, inheritAriaAttributes(this.host));\n        return (h(Host, { key: 'af2986a1df94f1c537dfafdb851829380a21b475' }, h(\"button\", Object.assign({ key: 'e4838583f4c2c13415bf0a73112e0a8a07dbe597' }, buttonProps), h(\"tds-icon\", { key: '47a2f2750155b166766dc493066c764e81122653', name: \"cross\", size: \"20px\" }))));\n    }\n    get host() { return getElement(this); }\n};\nTdsSideMenuCloseButton.style = TdsSideMenuCloseButtonStyle0;\n\nexport { TdsSideMenuCloseButton as tds_side_menu_close_button };\n"],"names":["ariaAttributes","inheritAriaAttributes","el","ignoreList","attributesToInherit","length","filter","attr","includes","inheritAttributes","attributeObject","arguments","undefined","forEach","hasAttribute","getAttribute","removeAttribute","TdsSideMenuCloseButton","constructor","hostRef","registerInstance","this","render","buttonProps","Object","assign","host","h","Host","key","name","size","getElement","style"],"sourceRoot":""}