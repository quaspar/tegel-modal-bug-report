{"version":3,"file":"static/js/269.0f841c41.chunk.js","mappings":"+HAaA,SAASA,IACL,MAAMC,EAAM,IAAIC,KACVC,EAAwC,IAAnBF,EAAIG,aAA0C,IAAnBH,EAAII,aAAsBJ,EAAIK,kBAC9EC,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,IAAhBD,KAAKE,UAKnC,OAHqBH,EAAWK,SAAS,IAAIC,UAAU,GACnDV,EAAmBS,SAAS,IAC5BD,EAAWC,SAAS,IAAIC,UAAU,EAE1C,C,yFCpBA,MAGMC,EAAY,MACdC,WAAAA,CAAYC,IACRC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,WAAYC,EAAAA,EAAAA,GAAYF,KAAM,YAAa,GAChDA,KAAKG,aAAe,KAChBH,KAAKI,SAAWJ,KAAKI,QACrBJ,KAAKC,UAAUI,KAAK,CAChBC,SAAUN,KAAKM,SACfF,QAASJ,KAAKI,SAChB,EAENJ,KAAKI,SAAU,EACfJ,KAAKO,UAAW,EAChBP,KAAKQ,KAAO,KACZR,KAAKS,UAAOC,EACZV,KAAKW,cAAWD,EAChBV,KAAKY,UAAW,EAChBZ,KAAKM,UAAWxB,EAAAA,EAAAA,IACpB,CAEA,YAAM+B,GAEF,OADAb,KAAKI,SAAWJ,KAAKI,QACd,CACHE,SAAUN,KAAKM,SACfF,QAASJ,KAAKI,QAEtB,CACAU,MAAAA,GACI,OAAQC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,IAAK,2CAA4CC,MAAO,cAAgBjB,KAAKW,WAAaI,EAAAA,EAAAA,GAAE,MAAO,CAAEE,MAAO,mBAAFC,OAAqBlB,KAAKY,SAAW,WAAa,KAAQZ,KAAKW,WAAYI,EAAAA,EAAAA,GAAE,QAAS,CAAEC,IAAK,2CAA4C,mBAAoBhB,KAAKmB,KAAKC,aAAa,oBAAqB,kBAAmBpB,KAAKmB,KAAKC,aAAa,mBAAoB,eAAgBpB,KAAKI,QAAS,gBAAiBJ,KAAKO,SAAUc,SAAUA,IAAMrB,KAAKG,eAAgBc,MAAO,GAAFC,OAAKlB,KAAKQ,MAAQJ,QAASJ,KAAKI,QAASQ,SAAUZ,KAAKY,SAAUL,SAAUP,KAAKO,SAAUe,KAAM,WAAYb,KAAMT,KAAKS,KAAMc,GAAIvB,KAAKM,SAAUkB,KAAM,YAAaT,EAAAA,EAAAA,GAAE,QAAS,CAAEC,IAAK,2CAA4CC,MAAO,GAAFC,OAAKlB,KAAKY,SAAW,WAAa,IAAMa,QAASzB,KAAKM,WAAYS,EAAAA,EAAAA,GAAE,OAAQ,CAAEC,IAAK,2CAA4CP,KAAM,WAC51B,CACA,QAAIU,GAAS,OAAOO,EAAAA,EAAAA,GAAW1B,KAAO,GAE1CJ,EAAU+B,MAnCQ,kuG","sources":["../node_modules/@scania/tegel/dist/esm/generateUniqueId-7934d315.js","../node_modules/@scania/tegel/dist/esm/tds-toggle.entry.js"],"sourcesContent":["/**\n * Generates a reasonably unique string ID based on current time (minutes, seconds, milliseconds) and random numbers.\n *\n * This function combines the current time and random numbers to generate\n * a unique string ID. The function assumes that it won't be called frequently\n * enough to generate two identical IDs within a millisecond, or that the random\n * number generator will produce the same value twice in quick succession.\n *\n * Note: The IDs generated by this function are not globally unique and their length may vary.\n * For truly unique and fixed-length IDs, consider using a more robust method such as UUID.\n *\n * @returns {string} A unique string ID.\n */\nfunction generateUniqueId() {\n    const now = new Date();\n    const timeInMilliseconds = now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds(); // Get current time in milliseconds from the start of the hour\n    const randomNum1 = Math.floor(Math.random() * 1000000); // Random number between 0 and 999999\n    const randomNum2 = Math.floor(Math.random() * 1000000); // Another random number\n    // Convert to base 36 (using numbers and letters) and remove '0.' from the random number\n    const uniqueString = randomNum1.toString(36).substring(2) +\n        timeInMilliseconds.toString(36) +\n        randomNum2.toString(36).substring(2);\n    return uniqueString;\n}\n\nexport { generateUniqueId as g };\n","import { r as registerInstance, c as createEvent, h, g as getElement } from './index-529974bd.js';\nimport { g as generateUniqueId } from './generateUniqueId-7934d315.js';\n\nconst toggleCss = \".tds-toggle.sc-tds-toggle .toggle-headline.sc-tds-toggle{font:var(--tds-detail-02);letter-spacing:var(--tds-detail-02-ls);color:var(--tds-toggle-headline);margin-bottom:12px}.tds-toggle.sc-tds-toggle .toggle-headline.disabled.sc-tds-toggle{color:var(--tds-toggle-headline-disabled)}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle{appearance:initial;margin:0;width:44px;height:24px;position:relative;display:inline-block;vertical-align:middle}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle::after,.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle::before{content:\\\"\\\";position:absolute;box-sizing:border-box;transition:all 0.5s cubic-bezier(0.075, 0.82, 0.165, 1)}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle::before{width:44px;height:24px;border-radius:16px;background-color:var(--tds-toggle-off-slider);left:0}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle::after{width:16px;height:16px;background-color:var(--tds-toggle-switch);border-radius:50%;left:4px;top:4px}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:focus{outline:none}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:focus::before{background-color:var(--tds-toggle-off-slider-focus);border:1px solid var(--tds-toggle-off-border-focus)}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:checked::before{background-color:var(--tds-toggle-on-slider);border:1px solid var(--tds-toggle-on-border-focus)}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:checked::after{left:24px}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:disabled::before{background-color:var(--tds-toggle-slider-disabled);border:1px solid var(--tds-toggle-slider-disabled)}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:disabled::after{background-color:var(--tds-toggle-switch-disabled)}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:disabled:checked::before{background-color:var(--tds-toggle-on-slider-disabled);border:1px solid var(--tds-toggle-on-slider-disabled)}.tds-toggle.sc-tds-toggle input[type=checkbox].sc-tds-toggle:disabled:checked::after{background-color:var(--tds-toggle-switch-disabled)}.tds-toggle.sc-tds-toggle input[type=checkbox].sm.sc-tds-toggle{width:28px;height:16px}.tds-toggle.sc-tds-toggle input[type=checkbox].sm.sc-tds-toggle::before{width:28px;height:16px}.tds-toggle.sc-tds-toggle input[type=checkbox].sm.sc-tds-toggle::after{width:8px;height:8px}.tds-toggle.sc-tds-toggle input[type=checkbox].sm.sc-tds-toggle:checked::before{background-color:var(--tds-toggle-on-slider)}.tds-toggle.sc-tds-toggle input[type=checkbox].sm.sc-tds-toggle:checked::after{left:16px}.tds-toggle.sc-tds-toggle input[type=checkbox].sm.sc-tds-toggle:disabled::before{background-color:var(--tds-toggle-slider-disabled);border:1px solid var(--tds-toggle-slider-disabled)}.tds-toggle.sc-tds-toggle input[type=checkbox].sm.sc-tds-toggle:disabled::after{background-color:var(--tds-toggle-switch-disabled)}.tds-toggle.sc-tds-toggle label.sc-tds-toggle{display:inline-block;vertical-align:middle;font:var(--tds-detail-01);letter-spacing:var(--tds-detail-01-ls);color:var(--tds-toggle-label-color);padding-left:8px}.tds-toggle.sc-tds-toggle label.disabled.sc-tds-toggle{color:var(--tds-toggle-label-color-disabled)}\";\nconst TdsToggleStyle0 = toggleCss;\n\nconst TdsToggle = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsToggle = createEvent(this, \"tdsToggle\", 6);\n        this.handleToggle = () => {\n            this.checked = !this.checked;\n            this.tdsToggle.emit({\n                toggleId: this.toggleId,\n                checked: this.checked,\n            });\n        };\n        this.checked = false;\n        this.required = false;\n        this.size = 'lg';\n        this.name = undefined;\n        this.headline = undefined;\n        this.disabled = false;\n        this.toggleId = generateUniqueId();\n    }\n    /** Toggles the Toggle. */\n    async toggle() {\n        this.checked = !this.checked;\n        return {\n            toggleId: this.toggleId,\n            checked: this.checked,\n        };\n    }\n    render() {\n        return (h(\"div\", { key: '726adc73f704e7f2b303983c7fb02a4656b0d84d', class: \"tds-toggle\" }, this.headline && (h(\"div\", { class: `toggle-headline ${this.disabled ? 'disabled' : ''}` }, this.headline)), h(\"input\", { key: '22628dcc2b941c27faf09eb10e9f6d7d50c03e3c', \"aria-describedby\": this.host.getAttribute('aria-describedby'), \"aria-labelledby\": this.host.getAttribute('aria-labelledby'), \"aria-checked\": this.checked, \"aria-required\": this.required, onChange: () => this.handleToggle(), class: `${this.size}`, checked: this.checked, disabled: this.disabled, required: this.required, type: \"checkbox\", name: this.name, id: this.toggleId, role: \"switch\" }), h(\"label\", { key: '235750e453463cf087d6683d5f1c1b02056f1536', class: `${this.disabled ? 'disabled' : ''}`, htmlFor: this.toggleId }, h(\"slot\", { key: '8d51817c8fa188f75e680f42d6cbad2ed6891ba3', name: \"label\" }))));\n    }\n    get host() { return getElement(this); }\n};\nTdsToggle.style = TdsToggleStyle0;\n\nexport { TdsToggle as tds_toggle };\n"],"names":["generateUniqueId","now","Date","timeInMilliseconds","getMinutes","getSeconds","getMilliseconds","randomNum1","Math","floor","random","randomNum2","toString","substring","TdsToggle","constructor","hostRef","registerInstance","this","tdsToggle","createEvent","handleToggle","checked","emit","toggleId","required","size","name","undefined","headline","disabled","toggle","render","h","key","class","concat","host","getAttribute","onChange","type","id","role","htmlFor","getElement","style"],"sourceRoot":""}