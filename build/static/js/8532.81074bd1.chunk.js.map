{"version":3,"file":"static/js/8532.81074bd1.chunk.js","mappings":"gIAaA,SAASA,IACL,MAAMC,EAAM,IAAIC,KACVC,EAAwC,IAAnBF,EAAIG,aAA0C,IAAnBH,EAAII,aAAsBJ,EAAIK,kBAC9EC,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,IAAhBD,KAAKE,UAKnC,OAHqBH,EAAWK,SAAS,IAAIC,UAAU,GACnDV,EAAmBS,SAAS,IAC5BD,EAAWC,SAAS,IAAIC,UAAU,EAE1C,C,4FCpBA,MAGMC,EAAc,MAChBC,WAAAA,CAAYC,IACRC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,WAAYC,EAAAA,EAAAA,GAAYF,KAAM,YAAa,GAChDA,KAAKG,UAAWD,EAAAA,EAAAA,GAAYF,KAAM,WAAY,GAC9CA,KAAKI,SAAUF,EAAAA,EAAAA,GAAYF,KAAM,UAAW,GAC5CA,KAAKK,aAAe,KAChBL,KAAKM,SAAWN,KAAKM,QACrBN,KAAKO,eAAgB,EACrBP,KAAKC,UAAUO,KAAK,CAChBC,WAAYT,KAAKS,WACjBH,QAASN,KAAKM,QACdC,cAAeP,KAAKO,cACpBG,MAAOV,KAAKU,OACd,EAENV,KAAKW,UAAOC,EACZZ,KAAKS,YAAa3B,EAAAA,EAAAA,KAClBkB,KAAKa,UAAW,EAChBb,KAAKc,UAAW,EAChBd,KAAKM,SAAU,EACfN,KAAKO,eAAgB,EACrBP,KAAKU,WAAQE,CACjB,CAEA,oBAAMG,GAGF,OAFAf,KAAKM,SAAWN,KAAKM,QACrBN,KAAKO,eAAgB,EACd,CACHE,WAAYT,KAAKS,WACjBH,QAASN,KAAKM,QAEtB,CACAU,wBAAAA,GACIhB,KAAKiB,aAAaV,cAAgBP,KAAKO,aAC3C,CAEAW,WAAAA,CAAYC,GACRnB,KAAKG,SAASK,KAAKW,EACvB,CAEAC,UAAAA,CAAWD,GACPnB,KAAKI,QAAQI,KAAKW,EACtB,CACAE,MAAAA,GACI,OAAQC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,IAAK,2CAA4CC,MAAO,iBAAkBF,EAAAA,EAAAA,GAAE,QAAS,CAAEC,IAAK,2CAE3GE,IAAMR,GAAkBjB,KAAKiB,aAAeA,EAAeV,cAAeP,KAAKO,cAAe,eAAgBP,KAAKM,QAAS,gBAAiBN,KAAKc,SAAU,mBAAoBd,KAAK0B,KAAKC,aAAa,oBAAqB,kBAAmB3B,KAAK0B,KAAKC,aAAa,mBAAoBb,SAAUd,KAAKc,SAAUc,KAAM,WAAYjB,KAAMX,KAAKW,KAAMD,MAAOV,KAAKU,MAAOmB,GAAI7B,KAAKS,WAAYH,QAASN,KAAKM,QAASO,SAAUb,KAAKa,SAAUiB,QAAUX,GAAUnB,KAAKkB,YAAYC,GAAQY,OAASZ,GAAUnB,KAAKoB,WAAWD,GAAQa,SAAUA,KAC5gBhC,KAAKK,cAAc,KACjBiB,EAAAA,EAAAA,GAAE,QAAS,CAAEC,IAAK,2CAA4CU,QAASjC,KAAKS,aAAca,EAAAA,EAAAA,GAAE,OAAQ,CAAEC,IAAK,2CAA4CZ,KAAM,WAC3K,CACA,QAAIe,GAAS,OAAOQ,EAAAA,EAAAA,GAAWlC,KAAO,CACtC,mBAAWmC,GAAa,MAAO,CAC3B,cAAiB,CAAC,4BACnB,GAEPvC,EAAYwC,MA3DQ,wxJ","sources":["../node_modules/@scania/tegel/dist/esm/generateUniqueId-7934d315.js","../node_modules/@scania/tegel/dist/esm/tds-checkbox.entry.js"],"sourcesContent":["/**\n * Generates a reasonably unique string ID based on current time (minutes, seconds, milliseconds) and random numbers.\n *\n * This function combines the current time and random numbers to generate\n * a unique string ID. The function assumes that it won't be called frequently\n * enough to generate two identical IDs within a millisecond, or that the random\n * number generator will produce the same value twice in quick succession.\n *\n * Note: The IDs generated by this function are not globally unique and their length may vary.\n * For truly unique and fixed-length IDs, consider using a more robust method such as UUID.\n *\n * @returns {string} A unique string ID.\n */\nfunction generateUniqueId() {\n    const now = new Date();\n    const timeInMilliseconds = now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds(); // Get current time in milliseconds from the start of the hour\n    const randomNum1 = Math.floor(Math.random() * 1000000); // Random number between 0 and 999999\n    const randomNum2 = Math.floor(Math.random() * 1000000); // Another random number\n    // Convert to base 36 (using numbers and letters) and remove '0.' from the random number\n    const uniqueString = randomNum1.toString(36).substring(2) +\n        timeInMilliseconds.toString(36) +\n        randomNum2.toString(36).substring(2);\n    return uniqueString;\n}\n\nexport { generateUniqueId as g };\n","import { r as registerInstance, c as createEvent, h, g as getElement } from './index-529974bd.js';\nimport { g as generateUniqueId } from './generateUniqueId-7934d315.js';\n\nconst checkboxCss = \".sc-tds-checkbox-h{align-items:center;position:relative;box-sizing:border-box}.tds-checkbox.sc-tds-checkbox{box-sizing:border-box;font:var(--tds-detail-02);letter-spacing:var(--tds-detail-02-ls);color:var(--tds-checkbox-text);display:flex;align-items:center;margin-left:-4px}.tds-checkbox.sc-tds-checkbox *.sc-tds-checkbox{box-sizing:border-box}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox{appearance:none;outline:none;margin:0;border:0;border-radius:2px;width:24px;height:24px;position:relative;cursor:pointer;flex-shrink:0;align-self:flex-start}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox+label.sc-tds-checkbox{color:var(--tds-checkbox-color);padding-left:var(--tds-spacing-element-4);padding-top:var(--tds-spacing-element-4);padding-bottom:var(--tds-spacing-element-4);cursor:pointer;display:flex;align-items:center}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox+label.sc-tds-checkbox::before{content:\\\"\\\";position:absolute;width:100%;height:100%;left:0;top:0}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox::before,.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox::after{content:\\\"\\\";position:absolute;box-sizing:border-box}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox::before{width:24px;height:24px;left:0;top:0;border-radius:4px}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox::after{border:1px solid var(--tds-checkbox-interaction-01);background-color:var(--tds-checkbox-interaction-02);width:16px;height:16px;left:4px;top:4px;border-radius:2px}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:hover::before{background-color:var(--tds-checkbox-background-hover);opacity:var(--tds-checkbox-background-opacity-hover)}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:focus::before{background-color:var(--tds-checkbox-background-focus);opacity:var(--tds-checkbox-background-opacity-focus);transition:opacity 0.2s ease-in-out}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:disabled,.tds-checkbox.sc-tds-checkbox input[type=checkbox].disabled.sc-tds-checkbox{cursor:not-allowed}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:disabled::after,.tds-checkbox.sc-tds-checkbox input[type=checkbox].disabled.sc-tds-checkbox::after{border-color:var(--tds-checkbox-border-color-disabled-after)}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:disabled+label.sc-tds-checkbox,.tds-checkbox.sc-tds-checkbox input[type=checkbox].disabled.sc-tds-checkbox+label.sc-tds-checkbox{color:var(--tds-grey-600);cursor:not-allowed}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:disabled:hover::before,.tds-checkbox.sc-tds-checkbox input[type=checkbox].disabled.sc-tds-checkbox:hover::before{display:none}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked::after{background-image:var(--tds-checkbox-background-img);background-color:var(--tds-checkbox-interaction-01);background-repeat:no-repeat;background-position:center}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked:hover::before{background-color:var(--tds-checkbox-background-hover);opacity:var(--tds-checkbox-background-opacity-hover)}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked:disabled:hover::before,.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked:disabled::before,.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked.disabled:hover::before,.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked.disabled::before{display:block;width:16px;height:16px;left:4px;top:4px;border:1px solid #b0b7c4}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked:disabled::after,.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:checked.disabled::after{background-image:var(--tds-checkbox-background-img-disabled);background-color:var(--tds-checkbox-interaction-02);color:var(--tds-checkbox-color-disabled-after)}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:indeterminate::after{background-image:var(--tds-checkbox-background-img-indeterminate);background-color:var(--tds-checkbox-interaction-01);background-repeat:no-repeat;background-position:center}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:indeterminate:disabled:hover::before,.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:indeterminate:disabled::before{display:block;width:16px;height:16px;left:4px;top:4px;border:1px solid #b0b7c4}.tds-checkbox.sc-tds-checkbox input[type=checkbox].sc-tds-checkbox:indeterminate:disabled::after{background-image:var(--tds-checkbox-background-img-indeterminate-disabled);background-color:var(--tds-checkbox-interaction-02);color:var(--tds-checkbox-color-disabled-after)}\";\nconst TdsCheckboxStyle0 = checkboxCss;\n\nconst TdsCheckbox = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsChange = createEvent(this, \"tdsChange\", 6);\n        this.tdsFocus = createEvent(this, \"tdsFocus\", 6);\n        this.tdsBlur = createEvent(this, \"tdsBlur\", 6);\n        this.handleChange = () => {\n            this.checked = !this.checked;\n            this.indeterminate = false;\n            this.tdsChange.emit({\n                checkboxId: this.checkboxId,\n                checked: this.checked,\n                indeterminate: this.indeterminate,\n                value: this.value,\n            });\n        };\n        this.name = undefined;\n        this.checkboxId = generateUniqueId();\n        this.disabled = false;\n        this.required = false;\n        this.checked = false;\n        this.indeterminate = false;\n        this.value = undefined;\n    }\n    /** Toggles the checked value of the component. */\n    async toggleCheckbox() {\n        this.checked = !this.checked;\n        this.indeterminate = false;\n        return {\n            checkboxId: this.checkboxId,\n            checked: this.checked,\n        };\n    }\n    handleIndeterminateState() {\n        this.inputElement.indeterminate = this.indeterminate;\n    }\n    /** Set the input as focus when clicking the component */\n    handleFocus(event) {\n        this.tdsFocus.emit(event);\n    }\n    /** Set the input as blur when clicking outside the component */\n    handleBlur(event) {\n        this.tdsBlur.emit(event);\n    }\n    render() {\n        return (h(\"div\", { key: '7f6c5e5b86e6253436ecdab246bb16bca35ac033', class: \"tds-checkbox\" }, h(\"input\", { key: '7d0743b1f01a4c5b87c99ba8756d068ed5e79dbf',\n            // eslint-disable-next-line no-return-assign\n            ref: (inputElement) => (this.inputElement = inputElement), indeterminate: this.indeterminate, \"aria-checked\": this.checked, \"aria-required\": this.required, \"aria-describedby\": this.host.getAttribute('aria-describedby'), \"aria-labelledby\": this.host.getAttribute('aria-labelledby'), required: this.required, type: \"checkbox\", name: this.name, value: this.value, id: this.checkboxId, checked: this.checked, disabled: this.disabled, onFocus: (event) => this.handleFocus(event), onBlur: (event) => this.handleBlur(event), onChange: () => {\n                this.handleChange();\n            } }), h(\"label\", { key: '74f9f1be873f228c20fa8aa526f7c067c77ed662', htmlFor: this.checkboxId }, h(\"slot\", { key: '676ba34f3edd4bad011dd54433bc82066c19c90c', name: \"label\" }))));\n    }\n    get host() { return getElement(this); }\n    static get watchers() { return {\n        \"indeterminate\": [\"handleIndeterminateState\"]\n    }; }\n};\nTdsCheckbox.style = TdsCheckboxStyle0;\n\nexport { TdsCheckbox as tds_checkbox };\n"],"names":["generateUniqueId","now","Date","timeInMilliseconds","getMinutes","getSeconds","getMilliseconds","randomNum1","Math","floor","random","randomNum2","toString","substring","TdsCheckbox","constructor","hostRef","registerInstance","this","tdsChange","createEvent","tdsFocus","tdsBlur","handleChange","checked","indeterminate","emit","checkboxId","value","name","undefined","disabled","required","toggleCheckbox","handleIndeterminateState","inputElement","handleFocus","event","handleBlur","render","h","key","class","ref","host","getAttribute","type","id","onFocus","onBlur","onChange","htmlFor","getElement","watchers","style"],"sourceRoot":""}