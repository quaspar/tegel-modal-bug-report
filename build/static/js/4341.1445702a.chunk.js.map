{"version":3,"file":"static/js/4341.1445702a.chunk.js","mappings":"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","sources":["../node_modules/@scania/tegel/dist/esm/tds-inline-tabs.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-529974bd.js';\n\nconst inlineTabsCss = \":host{box-sizing:border-box;display:flex;background-color:var(--tds-inline-tabs-background);position:relative}:host *{box-sizing:border-box}:host::after{content:\\\" \\\";display:block;border-bottom:1px solid var(--tds-inline-tabs-horizontal-divider-background);opacity:var(--tds-inline-tabs-horizontal-divider-opacity);left:0;right:0;bottom:0;position:absolute}:host .wrapper{display:flex;flex-wrap:nowrap;white-space:nowrap;width:100%;overflow-x:scroll;scrollbar-width:none}:host .wrapper::-webkit-scrollbar{display:none}:host .scroll-right-button{right:0;z-index:1}:host .scroll-left-button{left:0;z-index:1}:host .scroll-right-button,:host .scroll-left-button{color:var(--tds-folder-tabs-scroll-btn-color);cursor:pointer;border:0;width:0;background-color:var(--tds-inline-tabs-scroll-btn-background);display:none;justify-content:center;align-items:center;opacity:0;pointer-events:none;position:sticky}:host .scroll-right-button.show,:host .scroll-left-button.show{min-width:48px;display:block;opacity:1;pointer-events:all}:host .scroll-right-button:hover,:host .scroll-left-button:hover{background-color:var(--tds-folder-tabs-scroll-btn-background-hover)}:host .scroll-right-button:active,:host .scroll-left-button:active{background-color:var(--tds-folder-tabs-scroll-btn-background-active)}:host .scroll-right-button:focus,:host .scroll-left-button:focus{outline:2px solid var(--tds-blue-400);outline-offset:-2px}:host .scroll-right-button svg,:host .scroll-left-button svg{fill:var(--tds-folder-tabs-scroll-btn-color)}\";\nconst TdsInlineTabsStyle0 = inlineTabsCss;\n\nconst TdsInlineTabs = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsChange = createEvent(this, \"tdsChange\", 7);\n        this.navWrapperElement = null; // reference to container with nav buttons\n        this.componentWidth = 0; // visible width of this component\n        this.buttonsWidth = 0; // total width of all nav items combined\n        this.scrollWidth = 0; // total amount that is possible to scroll in the nav wrapper\n        this.addResizeObserver = () => {\n            const resizeObserver = new ResizeObserver((entries) => {\n                entries.forEach((entry) => {\n                    const componentWidth = entry.contentRect.width;\n                    let buttonsWidth = 0;\n                    const navButtons = Array.from(this.host.children);\n                    navButtons.forEach((navButton) => {\n                        const style = window.getComputedStyle(navButton);\n                        buttonsWidth +=\n                            navButton.clientWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n                    });\n                    this.componentWidth = componentWidth;\n                    this.buttonsWidth = buttonsWidth;\n                    this.scrollWidth = buttonsWidth - componentWidth;\n                    if (this.buttonsWidth > this.componentWidth) {\n                        this.evaluateScrollButtons();\n                    }\n                    else {\n                        this.showLeftScroll = false;\n                        this.showRightScroll = false;\n                    }\n                });\n            });\n            resizeObserver.observe(this.navWrapperElement);\n        };\n        this.addEventListenerToTabs = () => {\n            this.children = this.children.map((item, index) => {\n                item.addEventListener('click', () => {\n                    if (!item.disabled) {\n                        const tdsChangeEvent = this.tdsChange.emit({\n                            selectedTabIndex: this.children.indexOf(item),\n                        });\n                        if (!tdsChangeEvent.defaultPrevented) {\n                            this.children.forEach((element) => element.setSelected(false));\n                            item.setSelected(true);\n                            this.selectedIndex = index;\n                        }\n                    }\n                });\n                return item;\n            });\n        };\n        this.modeVariant = 'primary';\n        this.defaultSelectedIndex = 0;\n        this.selectedIndex = undefined;\n        this.showLeftScroll = false;\n        this.showRightScroll = false;\n        this.buttonWidth = 0;\n    }\n    /** Selects a Tab based on tabindex, will not select a disabled Tab. */\n    async selectTab(tabIndex) {\n        if (!this.children[tabIndex].disabled) {\n            this.children.forEach((element) => element.setSelected(false));\n            this.children = this.children.map((element, index) => {\n                if (index === tabIndex) {\n                    element.setSelected(true);\n                    this.selectedIndex = tabIndex;\n                }\n                return element;\n            });\n        }\n        return {\n            selectedTabIndex: this.selectedIndex,\n        };\n    }\n    handleSelectedIndexUpdate() {\n        this.children = Array.from(this.host.children).map((tabElement) => {\n            tabElement.setSelected(false);\n            return tabElement;\n        });\n        this.children[this.selectedIndex].setSelected(true);\n    }\n    scrollRight() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        this.navWrapperElement.scrollLeft = scroll + this.buttonsWidth;\n        this.evaluateScrollButtons();\n    }\n    scrollLeft() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        this.navWrapperElement.scrollLeft = scroll - this.buttonsWidth;\n        this.evaluateScrollButtons();\n    }\n    evaluateScrollButtons() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        if (scroll >= this.scrollWidth) {\n            this.showRightScroll = false;\n        }\n        else {\n            this.showRightScroll = true;\n        }\n        if (scroll <= 0) {\n            this.showLeftScroll = false;\n        }\n        else {\n            this.showLeftScroll = true;\n        }\n    }\n    connectedCallback() {\n        this.children = Array.from(this.host.children);\n        this.children[0].classList.add('first');\n        this.children[this.children.length - 1].classList.add('last');\n    }\n    componentDidLoad() {\n        if (this.selectedIndex === undefined) {\n            this.addEventListenerToTabs();\n            this.children[this.defaultSelectedIndex].setSelected(true);\n            this.selectedIndex = this.defaultSelectedIndex;\n            this.tdsChange.emit({\n                selectedTabIndex: this.selectedIndex,\n            });\n        }\n        else {\n            this.children[this.selectedIndex].setSelected(true);\n            this.tdsChange.emit({\n                selectedTabIndex: this.selectedIndex,\n            });\n        }\n    }\n    componentDidRender() {\n        if (this.buttonsWidth > this.componentWidth) {\n            this.evaluateScrollButtons();\n        }\n        else {\n            this.showLeftScroll = false;\n            this.showRightScroll = false;\n        }\n        this.addResizeObserver();\n    }\n    render() {\n        return (h(Host, { key: '12630d0f26631025fd23e38793b0d026861efdaa', role: \"list\", class: `${this.modeVariant ? `tds-mode-variant-${this.modeVariant}` : ''}` }, h(\"div\", { key: 'c939b7c4bb970a176ec63ef5b4517f18b7350565', class: \"wrapper\", ref: (el) => {\n                this.navWrapperElement = el;\n            } }, h(\"button\", { key: '20c61621bb4a87ffa9519d9a00de932fab0b4cd3', class: `scroll-left-button ${this.showLeftScroll ? 'show' : ''}`, onClick: () => this.scrollLeft(), disabled: !this.showLeftScroll }, h(\"tds-icon\", { key: 'bb09ec84777bb7bd5c6cdb2d9778985038279b99', name: \"chevron_left\", size: \"20px\" })), h(\"slot\", { key: '45791ec46399283291ded90b2f6377d5900ee22c' }), h(\"button\", { key: '46d3798aaddd5fdf0329e1dfe541c56f3c31bed1', class: `scroll-right-button ${this.showRightScroll ? 'show' : ''}`, onClick: () => this.scrollRight(), disabled: !this.showRightScroll }, h(\"tds-icon\", { key: '6dc940030163933123048108295e316fd004b928', name: \"chevron_right\", size: \"20px\" })))));\n    }\n    get host() { return getElement(this); }\n    static get watchers() { return {\n        \"selectedIndex\": [\"handleSelectedIndexUpdate\"]\n    }; }\n};\nTdsInlineTabs.style = TdsInlineTabsStyle0;\n\nexport { TdsInlineTabs as tds_inline_tabs };\n"],"names":["TdsInlineTabs","constructor","hostRef","registerInstance","this","tdsChange","createEvent","navWrapperElement","componentWidth","buttonsWidth","scrollWidth","addResizeObserver","ResizeObserver","entries","forEach","entry","contentRect","width","Array","from","host","children","navButton","style","window","getComputedStyle","clientWidth","parseFloat","marginLeft","marginRight","evaluateScrollButtons","showLeftScroll","showRightScroll","observe","addEventListenerToTabs","map","item","index","addEventListener","disabled","emit","selectedTabIndex","indexOf","defaultPrevented","element","setSelected","selectedIndex","modeVariant","defaultSelectedIndex","undefined","buttonWidth","selectTab","tabIndex","handleSelectedIndexUpdate","tabElement","scrollRight","scroll","scrollLeft","connectedCallback","classList","add","length","componentDidLoad","componentDidRender","render","h","Host","key","role","class","concat","ref","el","onClick","name","size","getElement","watchers"],"sourceRoot":""}