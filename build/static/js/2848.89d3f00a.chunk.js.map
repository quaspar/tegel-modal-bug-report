{"version":3,"file":"static/js/2848.89d3f00a.chunk.js","mappings":"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","sources":["../node_modules/@scania/tegel/dist/esm/tds-navigation-tabs.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-529974bd.js';\n\nconst navigationTabsCss = \":host{box-sizing:border-box;display:flex;background-color:var(--tds-inline-tabs-background);position:relative}:host *{box-sizing:border-box}:host::after{content:\\\" \\\";display:block;border-bottom:1px solid var(--tds-inline-tabs-horizontal-divider-background);opacity:var(--tds-inline-tabs-horizontal-divider-opacity);left:0;right:0;bottom:0;position:absolute}:host .wrapper{display:flex;flex-wrap:nowrap;white-space:nowrap;width:100%;overflow-x:scroll;scrollbar-width:none}:host .wrapper::-webkit-scrollbar{display:none}:host .scroll-right-button{right:0;z-index:1}:host .scroll-left-button{left:0;z-index:1}:host .scroll-right-button,:host .scroll-left-button{color:var(--tds-folder-tabs-scroll-btn-color);cursor:pointer;border:0;width:0;background-color:var(--tds-inline-tabs-scroll-btn-background);display:none;justify-content:center;align-items:center;opacity:0;pointer-events:none;position:sticky}:host .scroll-right-button.show,:host .scroll-left-button.show{min-width:48px;display:block;opacity:1;pointer-events:all}:host .scroll-right-button:hover,:host .scroll-left-button:hover{background-color:var(--tds-folder-tabs-scroll-btn-background-hover)}:host .scroll-right-button:active,:host .scroll-left-button:active{background-color:var(--tds-folder-tabs-scroll-btn-background-active)}:host .scroll-right-button:focus,:host .scroll-left-button:focus{outline:2px solid var(--tds-blue-400);outline-offset:-2px}:host .scroll-right-button svg,:host .scroll-left-button svg{fill:var(--tds-folder-tabs-scroll-btn-color)}\";\nconst TdsNavigationTabsStyle0 = navigationTabsCss;\n\nconst TdsNavigationTabs = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.tdsChange = createEvent(this, \"tdsChange\", 7);\n        this.navWrapperElement = null; // reference to container with nav buttons\n        this.componentWidth = 0; // visible width of this component\n        this.buttonsWidth = 0; // total width of all nav items combined\n        this.scrollWidth = 0; // total amount that is possible to scroll in the nav wrapper\n        this.addResizeObserver = () => {\n            const resizeObserver = new ResizeObserver((entries) => {\n                entries.forEach((entry) => {\n                    const componentWidth = entry.contentRect.width;\n                    let buttonsWidth = 0;\n                    const navButtons = Array.from(this.host.children);\n                    navButtons.forEach((navButton) => {\n                        const style = window.getComputedStyle(navButton);\n                        buttonsWidth +=\n                            navButton.clientWidth + parseFloat(style.marginLeft) + parseFloat(style.marginRight);\n                        navButton.classList.add('tds-navigation-tabs-tab');\n                    });\n                    this.componentWidth = componentWidth;\n                    this.buttonsWidth = buttonsWidth;\n                    this.scrollWidth = buttonsWidth - componentWidth;\n                    if (this.buttonsWidth > this.componentWidth) {\n                        this.evaluateScrollButtons();\n                    }\n                    else {\n                        this.showLeftScroll = false;\n                        this.showRightScroll = false;\n                    }\n                });\n            });\n            resizeObserver.observe(this.navWrapperElement);\n        };\n        this.addEventListenerToTabs = () => {\n            this.children = Array.from(this.host.children);\n            this.children = this.children.map((item, index) => {\n                item.addEventListener('click', () => {\n                    if (!item.disabled) {\n                        const tdsChangeEvent = this.tdsChange.emit({\n                            selectedTabIndex: this.children.indexOf(item),\n                        });\n                        if (!tdsChangeEvent.defaultPrevented) {\n                            this.children.forEach((element) => element.setSelected(false));\n                            item.setSelected(true);\n                            this.selectedIndex = index;\n                        }\n                    }\n                });\n                return item;\n            });\n        };\n        this.componentDidLoad = () => {\n            if (this.selectedIndex === undefined) {\n                this.addEventListenerToTabs();\n                this.children[this.defaultSelectedIndex].setSelected(true);\n                this.selectedIndex = this.defaultSelectedIndex;\n                this.tdsChange.emit({\n                    selectedTabIndex: this.selectedIndex,\n                });\n            }\n            else {\n                this.children[this.selectedIndex].setSelected(true);\n                this.tdsChange.emit({\n                    selectedTabIndex: this.selectedIndex,\n                });\n            }\n        };\n        this.modeVariant = 'primary';\n        this.defaultSelectedIndex = 0;\n        this.selectedIndex = undefined;\n        this.showLeftScroll = false;\n        this.showRightScroll = false;\n    }\n    /** Sets the passed tabindex as the selected Tab. */\n    async selectTab(tabIndex) {\n        if (!this.children[tabIndex].disabled) {\n            this.children.forEach((element) => element.setSelected(false));\n            this.children = this.children.map((element, index) => {\n                if (index === tabIndex) {\n                    element.setSelected(true);\n                    this.selectedIndex = tabIndex;\n                }\n                return element;\n            });\n        }\n        return {\n            selectedTabIndex: this.selectedIndex,\n        };\n    }\n    handleSelectedIndexUpdate() {\n        this.children = Array.from(this.host.children).map((tabElement) => {\n            tabElement.setSelected(false);\n            return tabElement;\n        });\n        this.children[this.selectedIndex].setSelected(true);\n    }\n    scrollRight() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        this.navWrapperElement.scrollLeft = scroll + this.buttonsWidth;\n        this.evaluateScrollButtons();\n    }\n    scrollLeft() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        this.navWrapperElement.scrollLeft = scroll - this.buttonsWidth;\n        this.evaluateScrollButtons();\n    }\n    evaluateScrollButtons() {\n        const scroll = this.navWrapperElement.scrollLeft;\n        if (scroll >= this.scrollWidth) {\n            this.showRightScroll = false;\n        }\n        else {\n            this.showRightScroll = true;\n        }\n        if (scroll <= 0) {\n            this.showLeftScroll = false;\n        }\n        else {\n            this.showLeftScroll = true;\n        }\n    }\n    connectedCallback() {\n        this.children = Array.from(this.host.children);\n        this.children[0].classList.add('first');\n        this.children[this.children.length - 1].classList.add('last');\n    }\n    componentDidRender() {\n        this.addResizeObserver();\n    }\n    render() {\n        return (h(Host, { key: '0ebc32eb685a718fd072e2875e76db089d3e0a67', role: \"list\", class: `${this.modeVariant ? `tds-mode-variant-${this.modeVariant}` : ''}` }, h(\"div\", { key: 'c198b4934264d0d961ccc4216f030fb8800e0b48', class: \"wrapper\", ref: (el) => {\n                this.navWrapperElement = el;\n            } }, h(\"button\", { key: 'ac7ed834e57afe5bb8422ef861d3984f49c199cc', class: `scroll-left-button ${this.showLeftScroll ? 'show' : ''}`, onClick: () => this.scrollLeft(), disabled: !this.showLeftScroll }, h(\"tds-icon\", { key: '6aa99d22388b928edc9c3c97557f8b219cf9498c', name: \"chevron_left\", size: \"20px\" })), h(\"slot\", { key: 'cd492ce2b51e1efd994f85405a2f3d6b8a4172d7' }), h(\"button\", { key: 'a28528c08c767347ce59ae2a4efcd23b14a593f0', class: `scroll-right-button ${this.showRightScroll ? 'show' : ''}`, onClick: () => this.scrollRight(), disabled: !this.showRightScroll }, h(\"tds-icon\", { key: '7e1d80299b44ea94e5420f26b14183989520d95d', name: \"chevron_right\", size: \"20px\" })))));\n    }\n    get host() { return getElement(this); }\n    static get watchers() { return {\n        \"selectedIndex\": [\"handleSelectedIndexUpdate\"]\n    }; }\n};\nTdsNavigationTabs.style = TdsNavigationTabsStyle0;\n\nexport { TdsNavigationTabs as tds_navigation_tabs };\n"],"names":["TdsNavigationTabs","constructor","hostRef","registerInstance","this","tdsChange","createEvent","navWrapperElement","componentWidth","buttonsWidth","scrollWidth","addResizeObserver","ResizeObserver","entries","forEach","entry","contentRect","width","Array","from","host","children","navButton","style","window","getComputedStyle","clientWidth","parseFloat","marginLeft","marginRight","classList","add","evaluateScrollButtons","showLeftScroll","showRightScroll","observe","addEventListenerToTabs","map","item","index","addEventListener","disabled","emit","selectedTabIndex","indexOf","defaultPrevented","element","setSelected","selectedIndex","componentDidLoad","undefined","defaultSelectedIndex","modeVariant","selectTab","tabIndex","handleSelectedIndexUpdate","tabElement","scrollRight","scroll","scrollLeft","connectedCallback","length","componentDidRender","render","h","Host","key","role","class","concat","ref","el","onClick","name","size","getElement","watchers"],"sourceRoot":""}