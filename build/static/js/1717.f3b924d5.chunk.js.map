{"version":3,"file":"static/js/1717.f3b924d5.chunk.js","mappings":"gIAaA,SAASA,IACL,MAAMC,EAAM,IAAIC,KACVC,EAAwC,IAAnBF,EAAIG,aAA0C,IAAnBH,EAAII,aAAsBJ,EAAIK,kBAC9EC,EAAaC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BC,EAAaH,KAAKC,MAAsB,IAAhBD,KAAKE,UAKnC,OAHqBH,EAAWK,SAAS,IAAIC,UAAU,GACnDV,EAAmBS,SAAS,IAC5BD,EAAWC,SAAS,IAAIC,UAAU,EAE1C,C,yFCpBA,MAGMC,EAAW,MACbC,WAAAA,CAAYC,IACRC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,4BAA6BC,EAAAA,EAAAA,GAAYF,KAAM,6BAA8B,GAClFA,KAAKG,kBAAmB,EACxBH,KAAKI,eAAgB,EACrBJ,KAAKK,gBAAaC,EAClBN,KAAKO,aAAc,EACnBP,KAAKQ,gBAAiB,EACtBR,KAAKS,YAAa,EAClBT,KAAKU,YAAc,KACnBV,KAAKW,SAAU7B,EAAAA,EAAAA,IACnB,CACA8B,yBAAAA,CAA0BC,EAAkBC,GACxCd,KAAKC,2BAA2Bc,KAAK,CACjCJ,QAASX,KAAKW,QACdK,QAAS,CAACH,GACV,CAACA,GAAmBC,GAE5B,CAEA,qBAAMG,GACF,IAAIC,EAAmB,GACvB,MAAMC,EAAYnB,KAAKoB,KAAKC,cAAc,kBAiB1C,OAhBqBC,MAAMC,KAAKJ,EAAUK,iBAAiB,uBAAuBC,QAAQC,GAAYA,EAAQC,WACjGC,SAASC,IAClB,IAAIC,EAAc,GACDR,MAAMC,KAAKM,EAAIE,qBAAqB,kBAC5CH,SAASI,IACd,IAAIC,EACJ,MAAMC,EAAa,CACfC,QAAS,KACTC,UAAW,MAEfF,EAAWC,QAAUH,EAAKG,QAC1BD,EAAWE,UAAsC,QAAzBH,EAAKD,EAAKI,iBAA8B,IAAPH,EAAgBA,EAAKD,EAAKK,UACnFP,EAAc,IAAIA,EAAaI,EAAW,IAE9ChB,EAAmB,IAAIA,EAAkBY,EAAY,IAElDZ,CACX,CACAoB,kBAAAA,CAAmBC,GACfvC,KAAKY,0BAA0B,cAAe2B,EAClD,CACAC,2BAAAA,CAA4BD,GACxBvC,KAAKY,0BAA0B,iBAAkB2B,EACrD,CACAE,oBAAAA,CAAqBF,GACjBvC,KAAKY,0BAA0B,gBAAiB2B,EACpD,CACAG,uBAAAA,CAAwBH,GACpBvC,KAAKY,0BAA0B,mBAAoB2B,EACvD,CACAI,iBAAAA,CAAkBJ,GACdvC,KAAKY,0BAA0B,aAAc2B,EACjD,CACAK,kBAAAA,CAAmBL,GACfvC,KAAKY,0BAA0B,cAAe2B,EAClD,CACAM,MAAAA,GACI,OAAQC,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,CAAEC,IAAK,2CAA4CC,MAAO,CAClE,wBAAyBjD,KAAKS,WAC9B,2BAAiD,YAArBT,KAAKU,YACjC,6BAAmD,cAArBV,KAAKU,eAClCoC,EAAAA,EAAAA,GAAE,QAAS,CAAEE,IAAK,2CAA4CC,MAAO,CACtE,aAAa,EACb,qBAAsBjD,KAAKI,cAC3B,qBAAsBJ,KAAKG,iBAC3B,0BAA2BH,KAAKK,WAChC,wBAAyBL,KAAKS,cAC7BqC,EAAAA,EAAAA,GAAE,OAAQ,CAAEE,IAAK,8CAC9B,CACA,QAAI5B,GAAS,OAAO8B,EAAAA,EAAAA,GAAWlD,KAAO,CACtC,mBAAWmD,GAAa,MAAO,CAC3B,YAAe,CAAC,sBAChB,eAAkB,CAAC,+BACnB,cAAiB,CAAC,wBAClB,iBAAoB,CAAC,2BACrB,WAAc,CAAC,qBACf,YAAe,CAAC,sBACjB,GAEPvD,EAASwD,MAtFQ,2L","sources":["../node_modules/@scania/tegel/dist/esm/generateUniqueId-7934d315.js","../node_modules/@scania/tegel/dist/esm/tds-table.entry.js"],"sourcesContent":["/**\n * Generates a reasonably unique string ID based on current time (minutes, seconds, milliseconds) and random numbers.\n *\n * This function combines the current time and random numbers to generate\n * a unique string ID. The function assumes that it won't be called frequently\n * enough to generate two identical IDs within a millisecond, or that the random\n * number generator will produce the same value twice in quick succession.\n *\n * Note: The IDs generated by this function are not globally unique and their length may vary.\n * For truly unique and fixed-length IDs, consider using a more robust method such as UUID.\n *\n * @returns {string} A unique string ID.\n */\nfunction generateUniqueId() {\n    const now = new Date();\n    const timeInMilliseconds = now.getMinutes() * 60000 + now.getSeconds() * 1000 + now.getMilliseconds(); // Get current time in milliseconds from the start of the hour\n    const randomNum1 = Math.floor(Math.random() * 1000000); // Random number between 0 and 999999\n    const randomNum2 = Math.floor(Math.random() * 1000000); // Another random number\n    // Convert to base 36 (using numbers and letters) and remove '0.' from the random number\n    const uniqueString = randomNum1.toString(36).substring(2) +\n        timeInMilliseconds.toString(36) +\n        randomNum2.toString(36).substring(2);\n    return uniqueString;\n}\n\nexport { generateUniqueId as g };\n","import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-529974bd.js';\nimport { g as generateUniqueId } from './generateUniqueId-7934d315.js';\n\nconst tableCss = \":host,.tds-table{border-collapse:collapse;display:table;box-sizing:border-box}:host *,.tds-table *{box-sizing:border-box}:host(.tds-table--responsive),.tds-table--responsive{width:100%}\";\nconst TdsTableStyle0 = tableCss;\n\nconst TdsTable = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.internalTdsTablePropChange = createEvent(this, \"internalTdsTablePropChange\", 6);\n        this.verticalDividers = false;\n        this.compactDesign = false;\n        this.noMinWidth = undefined;\n        this.multiselect = false;\n        this.expandableRows = false;\n        this.responsive = false;\n        this.modeVariant = null;\n        this.tableId = generateUniqueId();\n    }\n    emitInternalTdsPropChange(changedValueName, changedValue) {\n        this.internalTdsTablePropChange.emit({\n            tableId: this.tableId,\n            changed: [changedValueName],\n            [changedValueName]: changedValue,\n        });\n    }\n    /** Returns all selected rows data. */\n    async getSelectedRows() {\n        let selectedRowsData = [];\n        const tableBody = this.host.querySelector('tds-table-body');\n        const selectedRows = Array.from(tableBody.querySelectorAll('tds-table-body-row')).filter((element) => element.selected);\n        selectedRows.forEach((row) => {\n            let selectedRow = [];\n            const rowCells = Array.from(row.getElementsByTagName('tds-body-cell'));\n            rowCells.forEach((cell) => {\n                var _a;\n                const cellObject = {\n                    cellKey: null,\n                    cellValue: null,\n                };\n                cellObject.cellKey = cell.cellKey;\n                cellObject.cellValue = (_a = cell.cellValue) !== null && _a !== void 0 ? _a : cell.innerText;\n                selectedRow = [...selectedRow, cellObject];\n            });\n            selectedRowsData = [...selectedRowsData, selectedRow];\n        });\n        return selectedRowsData;\n    }\n    multiselectChanged(newValue) {\n        this.emitInternalTdsPropChange('multiselect', newValue);\n    }\n    enableExpandableRowsChanged(newValue) {\n        this.emitInternalTdsPropChange('expandableRows', newValue);\n    }\n    compactDesignChanged(newValue) {\n        this.emitInternalTdsPropChange('compactDesign', newValue);\n    }\n    verticalDividersChanged(newValue) {\n        this.emitInternalTdsPropChange('verticalDividers', newValue);\n    }\n    noMinWidthChanged(newValue) {\n        this.emitInternalTdsPropChange('noMinWidth', newValue);\n    }\n    modeVariantChanged(newValue) {\n        this.emitInternalTdsPropChange('modeVariant', newValue);\n    }\n    render() {\n        return (h(Host, { key: 'e90429bc887c2a3a24eaf3acf0bba7748fd291ed', class: {\n                'tds-table--responsive': this.responsive,\n                'tds-mode-variant-primary': this.modeVariant === 'primary',\n                'tds-mode-variant-secondary': this.modeVariant === 'secondary',\n            } }, h(\"table\", { key: '0ab17fb64542a59745bf6b5a8dee0fc365adecf3', class: {\n                'tds-table': true,\n                'tds-table--compact': this.compactDesign,\n                'tds-table--divider': this.verticalDividers,\n                'tds-table--no-min-width': this.noMinWidth,\n                'tds-table--responsive': this.responsive,\n            } }, h(\"slot\", { key: '855c9d02a5564e5ac5cba37c92b87e19e6fba919' }))));\n    }\n    get host() { return getElement(this); }\n    static get watchers() { return {\n        \"multiselect\": [\"multiselectChanged\"],\n        \"expandableRows\": [\"enableExpandableRowsChanged\"],\n        \"compactDesign\": [\"compactDesignChanged\"],\n        \"verticalDividers\": [\"verticalDividersChanged\"],\n        \"noMinWidth\": [\"noMinWidthChanged\"],\n        \"modeVariant\": [\"modeVariantChanged\"]\n    }; }\n};\nTdsTable.style = TdsTableStyle0;\n\nexport { TdsTable as tds_table };\n"],"names":["generateUniqueId","now","Date","timeInMilliseconds","getMinutes","getSeconds","getMilliseconds","randomNum1","Math","floor","random","randomNum2","toString","substring","TdsTable","constructor","hostRef","registerInstance","this","internalTdsTablePropChange","createEvent","verticalDividers","compactDesign","noMinWidth","undefined","multiselect","expandableRows","responsive","modeVariant","tableId","emitInternalTdsPropChange","changedValueName","changedValue","emit","changed","getSelectedRows","selectedRowsData","tableBody","host","querySelector","Array","from","querySelectorAll","filter","element","selected","forEach","row","selectedRow","getElementsByTagName","cell","_a","cellObject","cellKey","cellValue","innerText","multiselectChanged","newValue","enableExpandableRowsChanged","compactDesignChanged","verticalDividersChanged","noMinWidthChanged","modeVariantChanged","render","h","Host","key","class","getElement","watchers","style"],"sourceRoot":""}